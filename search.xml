<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>VS 下 GeoDa 开发环境配置</title>
      <link href="/uncategorized/geoda-setup/"/>
      <content type="html"><![CDATA[<p>最近帮师兄配置 GeoDa 的环境，顺便记录下。<a id="more"></a></p><p>目录：</p><ul><li><a href="#%E4%BE%9D%E8%B5%96%E5%BA%93%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85">依赖库下载与安装</a><ul><li><a href="#%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E5%BA%93">下载依赖库</a></li><li><a href="#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%BA%93">安装依赖库</a><ul><li><a href="#gdal-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">GDAL 编译安装</a></li><li><a href="#wxwidgets-%E7%BC%96%E8%AF%91">wxWidgets 编译</a></li><li><a href="#eigen">Eigen</a></li><li><a href="#boost-%E7%BC%96%E8%AF%91">Boost 编译</a></li><li><a href="#blas-%E5%92%8C-clapack-%E5%BA%93%E7%BC%96%E8%AF%91">BLAS 和 CLAPACK 库编译</a></li><li><a href="#sqlite-%E7%BC%96%E8%AF%91%E3%80%81curl-%E7%BC%96%E8%AF%91%E3%80%81-jsonspirit-%E7%BC%96%E8%AF%91">SQLite 编译、cURL 编译、 json_spirit 编译</a></li></ul></li></ul></li><li><a href="#geoda-%E7%9A%84%E7%BC%96%E8%AF%91">GeoDa 的编译</a></li></ul><p>主要会用到一些工具：</p><ul><li>Visual Studio 的命令提示符，主要用到 nmake 命令。</li><li>Visual Studio，我使用的是 Visual Studio 2017。</li><li>Internet Download Manager(IDM)，用于下载依赖库。</li><li><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a>，用于编译一些库。</li><li><a href="http://mingw.org/" target="_blank" rel="noopener">MinGW</a>，用于编译 Fortan 源码和一些库。</li></ul><p>下面分别说明编译过程</p><h1 id="依赖库下载与安装"><a href="#依赖库下载与安装" class="headerlink" title="依赖库下载与安装"></a>依赖库下载与安装</h1><h2 id="下载依赖库"><a href="#下载依赖库" class="headerlink" title="下载依赖库"></a>下载依赖库</h2><blockquote><p>GeoDa 要下载依赖库，吧？要的吧？官网没说啊。但是感觉肯定要吧。都没说哪些怎么下载啊！！！</p></blockquote><p>具体这个工程用到什么依赖库，可以在项目设置的“附加依赖项”中进行查看。</p><p>根据官网给出的 <a href="https://github.com/GeoDaCenter/geoda/blob/master/BuildTools/windows/readme.md" target="_blank" rel="noopener">README</a> 文件，需要运行一个 <code>Build.bat</code> 的批处理文件。但是运行这个文件后，会开始下载一些依赖库。</p><p>由于依赖库放在亚马逊云上，国内往往是访问不到的。因此需要提取出 <code>Build.bat</code> 中的下载链接，手动下载这些包。还有一种方法，就是把这些第三方库分别从其官网下载对应的版本。</p><p>如果一个一个找下载链接，那就太慢了。这时可以使用 IDM 提取剪贴板内下载链接的功能，批量下载。具体过程就不详述了。需要注意的是，MySQL 按照文件中给出的地址是无法下载的，需要自己下载。</p><h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><p>这里就要大量使用到 VS 的命令提示符了，大量使用 nmake 以命令行的方式安装。</p><h3 id="GDAL-编译安装"><a href="#GDAL-编译安装" class="headerlink" title="GDAL 编译安装"></a>GDAL 编译安装</h3><blockquote><p>致谢：在土哥大神的指导下，我完成了 GDAL 的编译和安装。编译详细信息可参见 <code>nmake.opt</code> 文件。</p></blockquote><p>编译 GDAL 之前要编译 GEOS 、 proj4 两个库。编译方法见后面。</p><ol><li><p>在 GDAL 的<strong>安装目录</strong>（下文使用 <code>%GDAL_HOME%</code> 以模拟环境变量的方式表示）下，运行以下命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake -f makefile.vc MSVC_VER=1910 DEBUG=1</span><br></pre></td></tr></table></figure><p> 需要注意的是，<code>MSVC_VER</code> 变量代表了编译器的版本。</p><p> 使用对应的版本号替换即可。另外， <code>DEBUG</code> 参数为 1 表示以 DEBUG 方式编译，为 0 表示以 RELEASE 方式编译。</p></li><li><p>编译完成后，需要安装 GDAL，才能把库文件放置在硬盘上。在 <code>nmake.opt</code> 文件中，找到下面行并修改：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- GDAL_HOME = <span class="string">"C:\warmerda\bld"</span></span><br><span class="line">+ GDAL_HOME = <span class="string">"D:\lib\gdal"</span></span><br></pre></td></tr></table></figure><p> 然后运行命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmake -f makefile.vc MSVC_VER=1910 DEBUG=1 DEVINSTALL   <span class="comment"># DEBUG 环境下</span></span><br><span class="line">nmake -f makefile.vc MSVC_VER=1910 DEBUG=1 INSTALL      <span class="comment"># RELEASE 环境下</span></span><br></pre></td></tr></table></figure><p> 就可以把库文件放置在 <code>GDAL_HOME</code> 设定的目录中。</p></li><li><p>编译完成后，将 <code>%GDAL_HOME%\include</code> 路径添加到 GeoDa 工程的包含目录中；将 <code>%GDAL_HOME%\lib</code> 路径添加到 GeoDa 工程的库目录中。</p></li></ol><table><thead><tr><th><code>MSVC_VER</code> 值</th><th>版本号</th></tr></thead><tbody><tr><td>1910</td><td>15.0(2017)</td></tr><tr><td>1900</td><td>14.0(2015)</td></tr><tr><td>1800</td><td>12.0(2013)</td></tr><tr><td>1700</td><td>11.0(2012)</td></tr><tr><td>1600</td><td>10.0(2010)</td></tr><tr><td>1500</td><td>9.0 (2008)</td></tr><tr><td>1400</td><td>8.0 (2005) - specific compilation flags, different from older VC++</td></tr><tr><td>1310</td><td>7.1 (2003) # is it still supported ?</td></tr><tr><td>1300</td><td>7.0 (2002) # is it still supported ?</td></tr></tbody></table><h3 id="wxWidgets-编译"><a href="#wxWidgets-编译" class="headerlink" title="wxWidgets 编译"></a>wxWidgets 编译</h3><p>wxWidgets 是开源跨平台的 GUI 库，GeoDa 的界面基于 wxWidgets。但是为了多语言，wxWidgets 使用 Unicode 编译，因此 GeoDa 也要用 Unicode 编译。在咨询了开发人员之后（<a href="https://github.com/GeoDaCenter/geoda/issues/1598" target="_blank" rel="noopener">Issus #1598: Why use a wxWidgets built in unicode?</a>），他们告诉了我正确的编译方式。</p><p>设 wxWidgets 的源文件目录为 <code>%WX_HOME%</code>，则它的 <code>makefile.vc</code> 文件位于 <code>%WX_HOME%\build\msw</code>，其编译指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake -f makefile.vc UNICODE=1 SHARED=1 RUNTIME_LIBS=dynamic MONOLITHIC=1 USE_OPENGL=1 USE_POSTSCRIPT=1 TARGET_CPU=AMD64</span><br></pre></td></tr></table></figure><p>这里的参数：</p><ul><li><code>BUILD=debug</code> 表示 DEBUG 方式编译。如果要 RELEASE 方式编译，使用 <code>BUILD=release</code>。</li><li><code>MONOLIHIC=1</code> 表示将所有的库打包到一个文件中，参见 <a href="https://wiki.wxwidgets.org/WxWidgets_Build_Configurations#configure" target="_blank" rel="noopener">WxWidgets Build Configurations</a>  这种方式编译时，必须编译动态库。</li><li><code>SHARED=1</code> 表示编译 DLL 动态链接库。</li><li><code>RUNTIME_LIBS=dynamic</code> 表示编译动态运行时库。</li></ul><!-- 此外还需要加一个参数： `wxUSE_WCHAR_T=1`，表示定义 `wxUSE_WCHAR_T` 宏，才能顺利编译通过。 --><p>编译完成后，将 <code>%WX_HOME%\include</code>、<code>%WX_HOME%\include\msvc</code> 路径添加到 GeoDa 工程的包含目录中；GeoDa 需要 <code>%WX_HOME%\lib\vc_lib\mswud\msvc\setup.h</code> 头文件，请确保其存在</p><h3 id="Eigen"><a href="#Eigen" class="headerlink" title="Eigen"></a>Eigen</h3><p>Eigen 是矩阵运算的库，无需编译。设 Eigen 的源文件目录为 <code>%EIGEN_HOME%</code>，则将 <code>%EIGEN_HOME%</code> 路径添加到 GeoDa 工程的包含目录中即可。</p><p>SQLite 相同。</p><h3 id="Boost-编译"><a href="#Boost-编译" class="headerlink" title="Boost 编译"></a>Boost 编译</h3><blockquote><p>参考 [boost 1.56.0 编译及使用][boost-build-blog]，版本不同但方法相同。</p></blockquote><p>下载 Boost 库后，设目录为 <code>%BOOST_SRC_HOME%</code>，使用 VS 命令提示符运行 <code>%BOOST_SRC_HOME%\bootstrap.bat</code>批处理文件。可以得到 <code>b2.exe</code> 和 <code>bjam.exe</code>，两个文件作用相同。</p><p>我用的编译命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b2 install --toolset=msvc-9.0 --without-python --prefix=<span class="string">"E:\SDK\boost\bin\vc9"</span> link=static runtime-link=shared runtime-link=static threading=multi debug release</span><br></pre></td></tr></table></figure><p>参数含义是：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>stage/install</code></td><td>stage表示只生成库（dll和lib），install还会生成包含头文件的include目录。</td></tr><tr><td><code>toolset</code></td><td>指定编译器，可选的如borland、gcc、msvc（VC6）、msvc-9.0（VS2008）等。</td></tr><tr><td><code>without/with</code></td><td>选择不编译/编译哪些库。</td></tr><tr><td><code>stagedir/prefix</code></td><td>stage时使用stagedir，install时使用prefix，表示编译生成文件的路径。推荐给不同的IDE指定不同的目录。</td></tr><tr><td><code>build-dir</code></td><td>编译生成的中间文件的路径。这里记为 <code>%BOOST_HOME%</code>。</td></tr><tr><td><code>link</code></td><td>生成动态链接库/静态链接库。生成动态链接库需使用shared方式，生成静态链接库需使用static方式。</td></tr><tr><td><code>runtime-link</code></td><td>动态/静态链接C/C++运行时库。同样有shared和static两种方式，这样runtime-link和link一共可以产生4种组合方式，各人可以根据自己的需要选择编译。</td></tr><tr><td><code>threading</code></td><td>单/多线程编译。</td></tr><tr><td><code>debug/release</code></td><td>编译debug/release版本。</td></tr></tbody></table><blockquote><p><code>link</code> 和 <code>runtime-link</code> 的缺省配置是 <code>link=static</code>、<code>runtime-link=shared</code>。</p></blockquote><p>编译完成后，将 <code>%BOOST_HOME%\include</code> 路径添加到 GeoDa 工程的包含目录中；将 <code>%BOOST_HOME%\lib</code> 路径添加到 GeoDa 工程的库目录中，在“附加依赖项”中修改引用的 Boost 库 lib 的版本。</p><blockquote><p>由于 GeoDa 只引用了 thread 这一个模块，因此可以只编译这一个模块，减少编译时间。</p></blockquote><h3 id="BLAS-和-CLAPACK-库编译"><a href="#BLAS-和-CLAPACK-库编译" class="headerlink" title="BLAS 和 CLAPACK 库编译"></a>BLAS 和 CLAPACK 库编译</h3><p>BALS 和 CLAPACK 都是 GeoDa 的依赖库，但是 BALS 已经包括在 CLAPACK 中。只需要编译 CLAPACK 即可。</p><p>下载 <a href="http://www.netlib.org/clapack/CLAPACK-3.1.1-VisualStudio.zip" target="_blank" rel="noopener">CLAPACK 的 VS 解决方案</a>，完成后打开解决方案文件，运行 VS 编译即可。</p><blockquote><p>官网给出的是使用 CMake 编译的方法，但是我在用 CMake 的时候总是报错，所以直接找了解决方案。</p></blockquote><h3 id="SQLite-编译、cURL-编译、-json-spirit-编译"><a href="#SQLite-编译、cURL-编译、-json-spirit-编译" class="headerlink" title="SQLite 编译、cURL 编译、 json_spirit 编译"></a>SQLite 编译、cURL 编译、 json_spirit 编译</h3><p>有人在 <a href="https://github.com/snikulov/sqlite.cmake.build" target="_blank" rel="noopener">GitHub</a> 上开源了 SQLite3 的 CMakeLists 文件，可以直接拿来编译。</p><ol><li><p>克隆其 GitHub 仓库：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/snikulov/sqlite.cmake.build.git</span><br></pre></td></tr></table></figure></li><li><p>使用 CMake 创建 VS 工程。</p></li><li>打开工程后，直接编译即可。</li></ol><p>其他两个库的方法相同。</p><h1 id="GeoDa-的编译"><a href="#GeoDa-的编译" class="headerlink" title="GeoDa 的编译"></a>GeoDa 的编译</h1><p>把上面这些依赖库编译好了之后，打开 GeoDa 的 VS 工程，要进行如下修改：</p><ol><li>将项目设置为使用 Unicode 编译。</li><li>包含目录和库目录加入之前编译的依赖库。</li><li>附加依赖项中，<ul><li>Boost 依赖项改为编译出来的依赖项；</li><li>所有 <code>wx</code> 开头的依赖项，结尾如果是 <code>d</code> 不是 <code>ud</code> 的，改为 <code>ud</code>；</li><li>其他依赖项如果名称有误，改为编译出来的名称。</li></ul></li></ol><p>然后可以执行编译。</p><blockquote><p>GeoDa 编译的工作实在是太繁重了，因此本文未完，将来会更新编译的最新进展。</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Vue 与 jQuery Mobile 混用</title>
      <link href="/%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91/vue-jqm-note/"/>
      <content type="html"><![CDATA[<p>由于项目需要，在手机端定下的框架是 jQuery Mobile。但由于应用比较大，没有 MVVM 支持会越来越困难。正好想尝试 Vue ，于是就直接开始 Vue 和 jQuery Mobile 混用的挖坑之路。<a id="more"></a></p><h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><h2 id="Detail-视图、表单自动生成"><a href="#Detail-视图、表单自动生成" class="headerlink" title="Detail 视图、表单自动生成"></a>Detail 视图、表单自动生成</h2><p>大纲-细节 (Master-Detail) 视图是经常用到的。每个对象的信息都不一样，而且往往会很多。我们这个项目中，起码有 20+ 的对象需要展示和填写。如果每个细节视图都像下面这样做，那工程量会非常大。</p><p><code>HTML</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">data-role</span>=<span class="string">"listview"</span> <span class="attr">data-inset</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>联系人员<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"listview-aside"</span>&gt;</span>&#123;&#123; item.call_person &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>联系电话<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"listview-aside"</span>&gt;</span>&#123;&#123; item.call_num &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>签发日期<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"listview-aside"</span>&gt;</span>&#123;&#123; item.call_date &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">``` </span><br><span class="line">&gt; 这样结合了 Vue，利用 Visual Studio Code 多点编辑的功能虽然也不慢，但是可以使用 Vue 寻求更简单的生成方式。</span><br><span class="line"></span><br><span class="line">我们可以对这个页面所表示的对象建立一个类，比如就叫 `Call`，为这个类编写一个公有 `Array` 属性 `domMap`，表示将这个类映射到 DOM 元素上：</span><br><span class="line"></span><br><span class="line">`JavaScript`</span><br><span class="line">``` JavaScript</span><br><span class="line">Call.prototype.domMap = [</span><br><span class="line">    &#123;</span><br><span class="line">        key: "call_person",</span><br><span class="line">        name: "联系人员",</span><br><span class="line">        type: "text",</span><br><span class="line">        hidden: false</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        key: "call_num",</span><br><span class="line">        name: "联系电话",</span><br><span class="line">        type: "tel",</span><br><span class="line">        hidden: false</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        key: "call_date",</span><br><span class="line">        name: "签发日期",</span><br><span class="line">        type: "date",</span><br><span class="line">        hidden: &#123;</span><br><span class="line">            listview: false,</span><br><span class="line">            form: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>前端根据这个 <code>domMap</code> 自动生成 DOM 元素。</p><p><code>HTML</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">data-role</span>=<span class="string">"listview"</span> <span class="attr">data-inset</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(dommap, index) in detail.domMap"</span> <span class="attr">v-if</span>=<span class="string">"!dommap.hidden &amp;&amp; !dommap.hidden.listview"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; dommap.name &#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"dommap.type === 'textarea'"</span> <span class="attr">class</span>=<span class="string">"listview-aside"</span>&gt;</span>&#123;&#123; detail[dommap.key] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"listview-aside"</span>&gt;</span>&#123;&#123; detail[dommap.key] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>detail</code> 是 Vue 对象中的一个属性，即当前详情列表所表示的对象。</p></blockquote><p>同理 <code>form</code> 也可以自动生成。碰到 <code>type</code> 是 <code>textarea</code> 的时候，生成一个 <code>&lt;textarea&gt;</code> 元素；其他情况下生成 <code>&lt;input&gt;</code> 元素，其 <code>type</code> 属性根据 <code>domMap</code> 中的 <code>type</code> 属性确定即可。</p><h2 id="表单元素动态添加"><a href="#表单元素动态添加" class="headerlink" title="表单元素动态添加"></a>表单元素动态添加</h2><p>甲方提出了在一个页面行动态添加行进行填写的要求，最后还要 Ajax 提交。如果用 jQuery 的话，需要在 HTML 元素中 Append 一段 HTML 代码，提交时循环查找所有行，然后组合成表单，最后提交。</p><p>但是用 Vue 的话，只需要在 HTML 上做好绑定，然后给被绑定的数组对象添加元素即可。方便了很多。我们网页端是用纯 jQuery 编写的，移动端我用的 Vue。</p><p><code>HTML</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"index-form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(ind, index) in form.wInsRecordZs"</span> <span class="attr">class</span>=<span class="string">"nd2-card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"card-primary-title"</span>&gt;</span> 相关检测指数&#123;&#123; index + 1 &#125;&#125; <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-supporting-text has-action has-title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui-field-contain"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-bind:for</span>=<span class="string">"'zs_' + index"</span>&gt;</span>指数（单位）<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"zs"</span> <span class="attr">v-bind:id</span>=<span class="string">"'zs_' + index"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"form.wInsRecordZs[index].zs"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui-field-contain"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-bind:for</span>=<span class="string">"'value_' + index"</span>&gt;</span>值<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"value"</span> <span class="attr">v-bind:id</span>=<span class="string">"'value_' + index"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"form.wInsRecordZs[index].value"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui-field-contain"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-bind:for</span>=<span class="string">"'stand_' + index"</span>&gt;</span>标准<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"stand"</span> <span class="attr">v-bind:id</span>=<span class="string">"'stand_' + index"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"form.wInsRecordZs[index].stand"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-action"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row between-xs"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 align-right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui-btn clr-primary ui-btn-inline"</span> <span class="attr">v-on:click</span>=<span class="string">"minusInticator(index)"</span>&gt;</span>删除 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row between-xs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 align-center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui-btn ui-btn-icon-left ui-btn-inline clr-primary"</span> <span class="attr">v-on:click</span>=<span class="string">"addIndicator()"</span>&gt;</span>添加检测指数 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui-btn ui-btn-icon-left ui-btn-inline"</span> <span class="attr">v-on:click</span>=<span class="string">"clean()"</span>&gt;</span>清空 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ui-btn ui-btn-icon-left ui-btn-inline ui-btn-raised clr-primary"</span> <span class="attr">v-on:click</span>=<span class="string">"submit()"</span>&gt;</span> 提交 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>JavaScript</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#index-form"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">            wInsRecordZs: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addIndicator: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.form.wInsRecordZs.push(<span class="keyword">new</span> Indicator());</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">"form"</span>).trigger(<span class="string">"create"</span>)</span><br><span class="line">            &#125;, <span class="number">10</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        submit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: <span class="string">"POST"</span>,</span><br><span class="line">                url: <span class="string">"http://127.0.0.1:3000/WInsR/save"</span>,</span><br><span class="line">                data: mainpageVM.form.toForm().substr(<span class="number">1</span>),</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">new</span> $.nd2Toast(&#123;</span><br><span class="line">                        message : <span class="string">"提交成功"</span>, <span class="comment">// Required</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">new</span> $.nd2Toast(&#123;</span><br><span class="line">                        message : <span class="string">"提交失败"</span>, <span class="comment">// Required</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        clean: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            mainpageVM.form.clean();</span><br><span class="line">        &#125;,</span><br><span class="line">        minusInticator: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">            mainpageVM.form.wInsRecordZs.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>开发网页端的那个哥们表示：他跟不上我的进度了。</p><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><p>对于<code>input</code>类型是<code>text</code> <code>tel</code> <code>number</code>这些需要输入的表单元素，没有什么问题。使用第三方插件提供支持的<code>date</code> <code>time</code> <code>datetime</code>类型元素，也没有问题。但是对于<code>radio</code> <code>checkbox</code>这两个元素，实测 jQuery Mobile 和 Vue 无法自动结合。</p><p>例如</p><p><code>HTML</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">id</span>=<span class="string">"fieldset"</span> <span class="attr">data-role</span>=<span class="string">"controlgroup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>项目状态<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"form.project_state"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"project_state"</span> <span class="attr">value</span>=<span class="string">"在建"</span>/&gt;</span>在建<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"form.project_state"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"project_state"</span> <span class="attr">value</span>=<span class="string">"改扩建"</span>/&gt;</span>改扩建<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"form.project_state"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"project_state"</span> <span class="attr">value</span>=<span class="string">"生产"</span>/&gt;</span>生产<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"form.project_state"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"project_state"</span> <span class="attr">value</span>=<span class="string">"停产"</span>/&gt;</span>停产<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>JavaScript</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> content = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"fieldset"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">            project_state: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这种情况下，进行单选操作，<code>content.form.project_state</code>的值是不更改的，有可能是 jQuery Mobile 在实现的时候，阻断了事件的传播，Vue 无法获取到真正的值。如果希望更改 Vue 对象中的值，那么需要给每个按钮元素加上<code>onclick</code>事件响应函数，替换<code>v-model</code>绑定。</p><p><code>HTML</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">id</span>=<span class="string">"fieldset"</span> <span class="attr">data-role</span>=<span class="string">"controlgroup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>项目状态<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"form.project_state"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"project_state"</span> <span class="attr">onclick</span>=<span class="string">"content.form.project_state= '在建'"</span> <span class="attr">value</span>=<span class="string">"在建"</span>/&gt;</span>在建<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"form.project_state"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"project_state"</span> <span class="attr">onclick</span>=<span class="string">"content.form.project_state= '改扩建'"</span> <span class="attr">value</span>=<span class="string">"改扩建"</span>/&gt;</span>改扩建<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"form.project_state"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"project_state"</span> <span class="attr">onclick</span>=<span class="string">"content.form.project_state= '生产'"</span> <span class="attr">value</span>=<span class="string">"生产"</span>/&gt;</span>生产<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"form.project_state"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"project_state"</span> <span class="attr">onclick</span>=<span class="string">"content.form.project_state= '停产'"</span> <span class="attr">value</span>=<span class="string">"停产"</span>/&gt;</span>停产<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在这样就可以更改<code>content</code>中的值了。</p><p>但是有趣的是，如果你使用了<code>v-model</code>绑定元素到某个对象（例如这里的<code>project_state</code>），那么当你在初始化 Vue 对象的时候，对该对象（<code>project_state</code>）赋值，绑定到它的单选按钮组会自动根据该对象的值进行初始化。比如你设置了<code>project_state</code>的初始值为“生产”，那么“生产”对应的第三个单选按钮会在文档初始化的过程中被选中。</p><h2 id="动态加载-DOM-元素"><a href="#动态加载-DOM-元素" class="headerlink" title="动态加载 DOM 元素"></a>动态加载 DOM 元素</h2><p>按照 jQuery Mobile 官网上的示例，所有标签的样式在编写 HTML 文档的时候，都使用 <code>data-</code> 属性确定，文档加载完毕后会自动初始化并加载样式。当在文档中使用 Vue 动态添加元素的时候，就会出现没有样式的情况。</p><p>解决这个问题的办法有两个。</p><ol><li><strong>如果元素只需要使用 jQuery Mobile 的样式</strong>，在使用 <code>v-for</code> 的时候，直接指定元素的 <code>class</code> 属性，同时也加上 <code>data-</code> 属性。</li><li><p>如果元素需要 jQuery Mobile 自带的一些事件响应（比如 <code>collapsible</code> 元素，点击标头需要可以展开或折叠其内容。这时，在添加元素事件发生后，在其父元素上触发<code>create</code>事件。例如：我在表单中根据 Vue 绑定值 <code>form.wInsRecordZs[]</code> 动态添加一个 <code>collapsible</code>，就可以这样做</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.form.wInsRecordZs.push(<span class="keyword">new</span> Indicator());</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"form"</span>).trigger(<span class="string">"create"</span>)</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p> 其中 <code>trigger(&quot;create&quot;)</code> 方法可以让 jQuery Mobile 对添加的元素自动初始化。设置一段时间后再触发是实践的结果，绑定的数组添加后，DOM 元素不一定立刻添加了，需要等一小段时间才能添加。我们设置一段延迟，保证在 DOM 元素已经添加之后，再触发 <code>create</code> 事件。</p></li></ol>]]></content>
      
      <categories>
          
          <category> 网页开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> jQuery Mobile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Path-Inference-Filter(PIF) 算法调用的实现</title>
      <link href="/%E7%A7%91%E7%A0%94%E5%B7%A5%E4%BD%9C/implementation-pif/"/>
      <content type="html"><![CDATA[<p>Path Inference Filter(PIF, 道路推断滤波)算法是一种基于概率的路网匹配算法。其核心代码已经开源在 <a href="https://github.com/tjhunter/Path-Inference-Filter" target="_blank" rel="noopener">GitHub</a> 上，作者也提供了一个<code>example.py</code>文件，来介绍如何使用。我由于需要将此算法真实用于路网匹配中，因此需要根据实际路网对此算法进行调用。之前使用 ArcPy 写了一个，但是运行速度非常慢，而且跑着跑着电脑就自动关机了。所以现在就用 PostGIS 和 pgRouting 重新实现一个版本。<a id="more"></a></p><h1 id="PIF-的数学原理"><a href="#PIF-的数学原理" class="headerlink" title="PIF 的数学原理"></a>PIF 的数学原理</h1><p>此处详细情况请参考论文 <em><a href="http://bayen.eecs.berkeley.edu/sites/default/files/journals/The_Path_Inference_Filter.pdf" target="_blank" rel="noopener">The Path Inference Filter: Model-Based Low-Latency Map Matching of Probe Vehicle Data</a></em> 。后面我会补充一个自己整理的简略版原理。</p><h1 id="PIF-的接口调用"><a href="#PIF-的接口调用" class="headerlink" title="PIF 的接口调用"></a>PIF 的接口调用</h1><p>PIF 核心库提供了一些类供我们使用。比如：</p><ul><li><code>State</code>和<code>StateCollection</code>：描述状态值的类及状态值的集合。</li><li><code>LatLng</code>：表示经纬度的对象。</li><li><code>PathBuilder</code>：路径建立类。用于生成状态值之间的可达路径。</li><li><code>LearningTrajectory</code>：用于获取轨迹的描述。</li><li><code>TrajectoryViterbi1</code>：用于计算概率最大的轨迹。</li><li><code>TrajectorySmoother1</code>：用于滤波。</li></ul><p><code>State</code>、<code>StateCollection</code>、<code>LatLng</code>三个类可以直接使用。对于我们拿到的 GPS 数据来说，一般都会有一些附加的属性值，例如速度、方向、车辆状态等。可以创建自己的继承自<code>LatLng</code>和<code>State</code>的子类，添加这些属性。</p><p>我们可以将一些常用的函数，封装到类<code>WuhanRoadFilter</code>中，例如：计算距离的函数<code>distance</code>、计算状态值特征向量和路径特征向量的函数等。该类的形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WuhanRoadFilter</span>:</span></span><br><span class="line">    <span class="string">''' 路径滤波类</span></span><br><span class="line"><span class="string">    对武汉市道路网络数据和Path-Inference-Path的封装。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    属性：</span></span><br><span class="line"><span class="string">    - `network`: 网络数据集</span></span><br><span class="line"><span class="string">    - `line_features`: 要素数据集</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conn)</span>:</span></span><br><span class="line">        <span class="string">''' 构造函数</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.conn = conn <span class="comment"># type: psycopg2.exetensions.connection</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(self, coord1: LatLng, coord2: LatLng)</span> -&gt; float:</span></span><br><span class="line">        <span class="string">''' 求两地理坐标之间的距离</span></span><br><span class="line"><span class="string">        - `coord1`: 经纬度坐标值</span></span><br><span class="line"><span class="string">        - `coord2`: 经纬度坐标值</span></span><br><span class="line"><span class="string">        - `spatial_ref`: 空间参考。默认为GCS_WGS_1984</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">point_feature_vector</span><span class="params">(self, state_collection: StateCollection)</span>:</span></span><br><span class="line">        <span class="string">""" 点的特征向量</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">path_feature_vector</span><span class="params">(self, select_path: Tuple[State, List, State, float])</span>:</span></span><br><span class="line">        <span class="string">""" 路径的特征向量</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_posibility_states</span><span class="params">(self, point: TaxiPoint, distance: float)</span>:</span></span><br><span class="line">        <span class="string">''' 获取最可能的状态</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">        - `link_id`: 路段ID</span></span><br><span class="line"><span class="string">        - `point`: 要寻找的点。格式为(lon, lat)的二元组</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        返回值: StateCollection</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_observations</span><span class="params">(self, file_path: str, filting=<span class="number">0</span>)</span> -&gt; List[List[StateCollection]]:</span></span><br><span class="line">        <span class="string">''' 创建观测值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        参数：</span></span><br><span class="line"><span class="string">        - `file_path`: 观测值XML文件路径</span></span><br><span class="line"><span class="string">        - `filting`: 观测值序列最少的点数</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在调用过程中，可以创建<code>PathBuilder</code>的子类，来实现自己的路径搜索。子类中只需要实现方法<code>getPaths()</code>。此方法用于在方法<code>getPathsBetweenCollections()</code>中调用以获取路径。必须实现，否则会抛出<code>NotImplementedError</code>的错误。我们创建类<code>WuhanRoadBuilder</code>，在该类中实现<code>getPaths()</code>方法。该类的形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WuhanRoadBuilder</span><span class="params">(PathBuilder)</span>:</span></span><br><span class="line">    <span class="string">''' 武汉市路网的路径工厂</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    路径工厂会生成两个状态集合之间的所有路径</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, conn)</span>:</span></span><br><span class="line">        <span class="comment"># PathBuilder.__init__()</span></span><br><span class="line">        self.conn = conn <span class="comment"># type: psycopg2.extensions.connection</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPaths</span><span class="params">(self, s1: State, s2: State)</span>:</span></span><br><span class="line">        <span class="string">''' 获取两个状态之间的路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        利用ArcPy获取路网上两点之间的最短路径</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这些函数和 PIF 框架的调用过程可参考 PIF 库中的<code>example.py</code>文件。</p><h1 id="利用-pgRouting-实现调用-PIF-算法"><a href="#利用-pgRouting-实现调用-PIF-算法" class="headerlink" title="利用 pgRouting 实现调用 PIF 算法"></a>利用 pgRouting 实现调用 PIF 算法</h1><p>借助 PostGIS 和 pgRouting 可以实现路径搜索功能，而使用 PostGIS 提供的大量的关于几何和地理数据的函数，可以方便实现对 PIF 算法的调用。但是这里需要编写的数据库函数，需要一定的数据库编程的能力。为了能够和 Python 编写的 PIF 核心代码结合起来，需要使用 Python 调用 PostgreSQL 函数，并将结果转化为 Geometry 及其子类型的对象。</p><h2 id="使用到的-Python-包"><a href="#使用到的-Python-包" class="headerlink" title="使用到的 Python 包"></a>使用到的 Python 包</h2><p>使用下面两个包即可：</p><ol><li><a href="http://initd.org/psycopg/docs/index.html" target="_blank" rel="noopener">psycopg2</a>：封装了对 PostgreSQL 数据库的操作。</li><li><a href="https://github.com/yohanboniface/python-postgis" target="_blank" rel="noopener">postgis</a>：封装了 PostGIS 空间类型。</li></ol><h2 id="准备路网数据"><a href="#准备路网数据" class="headerlink" title="准备路网数据"></a>准备路网数据</h2><p>假设我们要导入的路网数据名字叫<code>road</code>。一般情况下，我们拿到的数据，坐标系为 WGS84 或常用的投影坐标系（如CGCS2000）。在 WGS84 坐标系下的数据，以<code>Geography</code>类型存储在数据库中，在投影坐标系下的数据，以<code>Geometry</code>类型存储在数据库中。在 <a href="http://postgis.net/docs/manual-2.4/using_postgis_dbmanagement.html#PostGIS_Geography" target="_blank" rel="noopener">PostGIS</a> 的文档中，建议使用<code>Geometry</code>类型存储数据，以减小计算量。</p><blockquote><p>The geography type allows you to store data in longitude/latitude coordinates, but at a cost: there are fewer functions defined on GEOGRAPHY than there are on GEOMETRY; those functions that are defined take more CPU time to execute. </p><p><em>Geography 类型允许你以经纬度坐标的方式存储数据，但是代价是：Geography 类型比 Geometry 类型的函数少；Geography 类型的函数执行起来消耗更多的 CPU 时间。</em></p><p>The type you choose should be conditioned on the expected working area of the application you are building. Will your data span the globe or a large continental area, or is it local to a state, county or municipality?</p><ul><li>If your data is contained in a small area, you might find that choosing an appropriate projection and using GEOMETRY is the best solution, in terms of performance and functionality available.</li><li>If your data is global or covers a continental region, you may find that GEOGRAPHY allows you to build a system without having to worry about projection details. You store your data in longitude/latitude, and use the functions that have been defined on GEOGRAPHY.</li><li>If you don’t understand projections, and you don’t want to learn about them, and you’re prepared to accept the limitations in functionality available in GEOGRAPHY, then it might be easier for you to use GEOGRAPHY than GEOMETRY. Simply load your data up as longitude/latitude and go from there.</li></ul></blockquote><p>因此，我们采用投影坐标系的路网数据。</p><h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><p>导入时数据的方法非常简单，使用 PostGIS Shapefiel Import/Export Manager(PostGIS 2.0 Shapefile and DBF Loader Exporter) 工具导入即可。</p><img src="/科研工作/implementation-pif/PostGIS-Shp-Tool.png"><p>在这个工具上设置数据库的连接，选择要导入的 shp 文件。选定 shp 文件后，最好点击 Options 按钮打开选项，选中最后一个复选框。</p><img src="/科研工作/implementation-pif/shp-options.png"><p>确定后，点击 Improt 按钮开始导入。等待其完成即可。</p><p>需要注意的是，shp 文件的名字，会作为最终导入到数据库中表的名字。</p><h3 id="拓扑关系建立"><a href="#拓扑关系建立" class="headerlink" title="拓扑关系建立"></a>拓扑关系建立</h3><p>我们导入的数据集，在网络结构中数据“边”类型，pgRouting 称之为 <em>edge</em>。pgRouting 需要知道每个 edge 的起点和终点的序号是什么，需要知道路径的长度是多少。需要给<code>road</code>数据集添加三个字段：<code>source</code>、<code>target</code>和<code>length</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> road <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="keyword">source</span> <span class="built_in">integer</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> road <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> target <span class="built_in">integer</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> road <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="keyword">length</span> <span class="keyword">double</span> <span class="keyword">precision</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> road <span class="keyword">set</span> <span class="keyword">length</span> = ST_Length(geom); <span class="comment">-- 为路段长度赋值</span></span><br></pre></td></tr></table></figure><p>当然这两个字段的名字可以自己取。路径长度字段如果已经有了，也可以不用重新建立。</p><p>然后是拓扑关系的建立。使用 pgRouting 提供的函数 <a href="http://docs.pgrouting.org/2.4/en/pgr_createTopology.html#pgr-createtopology" target="_blank" rel="noopener"><code>pgr_createTopology()</code></a> 来创建拓扑，该函数有以下参数：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td><code>edge_table</code></td><td>路网表名（也可以包含数据库名）。文本类型。</td></tr><tr><td><code>tolerance</code></td><td>路段不连续误差。8字节浮点数类型。</td></tr><tr><td><code>the_geom</code></td><td>路网表中 Geometry 列的名称（默认是”the_geom”）。文本类型。</td></tr><tr><td><code>id</code></td><td>路网表中主键列的名称（默认是”id”）。文本类型。</td></tr><tr><td><code>source</code></td><td>路网表中 source 列的名称（默认是”source”）。文本类型。</td></tr><tr><td><code>target</code></td><td>路网表中 target 列的名称（默认是”target”）。文本类型。</td></tr><tr><td><code>rows_where</code></td><td>用于选择一个子集或多行的 SELECT 条件。默认值是选择所有 source 和 target 为空的行。文本类型。</td></tr><tr><td><code>clean</code></td><td>是否清除之前的拓扑关系（默认是 false ）。布尔型。</td></tr></tbody></table><p>具体调用实例为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pgr_createTopology(<span class="string">'public.road'</span>, <span class="number">0.001</span>, <span class="string">'geom'</span>, <span class="string">'gid'</span>);</span><br></pre></td></tr></table></figure><p>路网数据准备完成。</p><h2 id="计算两点间距离"><a href="#计算两点间距离" class="headerlink" title="计算两点间距离"></a>计算两点间距离</h2><p>这里只需要使用到 PostGIS 提供的函数<code>ST_Distance()</code>，函数的用法非常简单，可参考<a href="http://postgis.net/docs/manual-2.4/ST_Distance.html" target="_blank" rel="noopener">官网文档</a>。为了方便调用，我们设计一个数据库函数<code>PIF_GetDistance()</code>，使其可以直接输入两个坐标值，进行距离计算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> <span class="string">"public"</span>.<span class="string">"PIF_GetDistance"</span>(<span class="string">"x1"</span> float8, <span class="string">"y1"</span> float8, <span class="string">"x2"</span> float8, <span class="string">"y2"</span> float8)</span><br><span class="line">  <span class="keyword">RETURNS</span> <span class="string">"pg_catalog"</span>.<span class="string">"float8"</span> <span class="keyword">AS</span> $<span class="keyword">BODY</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">point1 Geometry := ST_Transform(ST_SetSrid(ST_Point(x1, y1), <span class="number">4326</span>), <span class="number">3857</span>);</span><br><span class="line">point2 Geometry := ST_Transform(ST_SetSrid(ST_Point(x2, y2), 4326), 3857);</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- Routine body goes here...</span></span><br><span class="line"><span class="keyword">RETURN</span> ST_Distance(point1, point2);</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$<span class="keyword">BODY</span>$</span><br><span class="line">  <span class="keyword">LANGUAGE</span> plpgsql VOLATILE</span><br><span class="line">  <span class="keyword">COST</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p>Python 中调用此函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(self, coord1: LatLng, coord2: LatLng)</span> -&gt; float:</span></span><br><span class="line">    <span class="string">''' 求两地理坐标之间的距离</span></span><br><span class="line"><span class="string">    - `coord1`: 经纬度坐标值</span></span><br><span class="line"><span class="string">    - `coord2`: 经纬度坐标值</span></span><br><span class="line"><span class="string">    - `spatial_ref`: 空间参考。默认为GCS_WGS_1984</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    cur = self.conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">'SELECT "PIF_GetDistance"(%s, %s, %s, %s)'</span>,</span><br><span class="line">                (coord1.lng, coord1.lat, coord2.lng, coord2.lat))</span><br><span class="line">    <span class="keyword">return</span> cur.fetchone()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="获取每个-GPS-点对应的状态值"><a href="#获取每个-GPS-点对应的状态值" class="headerlink" title="获取每个 GPS 点对应的状态值"></a>获取每个 GPS 点对应的状态值</h2><p>状态值的获取是在一个路段上计算一个联合分布 $$ π(x|g) = ω(g|x)Ω(x) $$ 其中 $ x $ 是状态值，$ g $ 是 GPS 观测值。但是由于分布 $ ω(g|x) $ 服从正态分布，$ Ω(x) $ 在没有先验知识的情况下，服从均匀分布，因此直接取路段上距离 GPS 观测值最近的点即可。</p><h3 id="需要使用到的-PostGIS-函数"><a href="#需要使用到的-PostGIS-函数" class="headerlink" title="需要使用到的 PostGIS 函数"></a>需要使用到的 PostGIS 函数</h3><p>编写这个数据库函数，需要用到 PostGIS 提供的一些函数，如下（参考 <a href="http://postgis.net/docs/manual-2.4/PostGIS_Special_Functions_Index.html#PostGIS_TypeFunctionMatrix" target="_blank" rel="noopener">PostGIS 文档</a>）：</p><table><thead><tr><th>函数</th><th>用途</th></tr></thead><tbody><tr><td><code>ST_Point(float, float)</code></td><td>构造 Point 对象的函数。</td></tr><tr><td><code>ST_SetSRID(geometry, integer)</code></td><td>设置对象的 SRID（即空间参考）。</td></tr><tr><td><code>ST_Transform(geometry, integer)</code></td><td>将 Geometry 对象进行投影转换。</td></tr><tr><td><code>ST_StartPoint(geometry)</code></td><td>LineString Geometry 对象的第一个点。</td></tr><tr><td><code>ST_EndPoint(geometry)</code></td><td>LineString Geometry 对象的最后一个点。</td></tr><tr><td><code>ST_ClosestPoint(geometry, geometry)</code></td><td>返回第一个 Geometry 对象上距离第二个 Geometry 对象最近的点。</td></tr><tr><td><code>ST_LineLocatePoint(geometry a_linestring, geometry a_point)</code></td><td>返回<code>a_line</code>上距离<code>a_point</code>最近的点在<code>a_line</code>上的百分比。</td></tr></tbody></table><h3 id="编写-PostgreSQL-函数"><a href="#编写-PostgreSQL-函数" class="headerlink" title="编写 PostgreSQL 函数"></a>编写 PostgreSQL 函数</h3><p>函数实现的思路是：首先按照范围筛选处距离指定 GPS 观测值一定距离（例如 100 m）内的路段，然后在这些路段上计算每个最近点。</p><p>数据库函数<code>PIF_GetStatesAtPosition()</code>的定义如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> public.pif_GetStatesAtPosition(</span><br><span class="line">    lon <span class="built_in">float</span>,</span><br><span class="line">    lat <span class="built_in">float</span>,</span><br><span class="line">    distance <span class="built_in">float</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">TABLE</span>(StartPoint geometry, EndPoint geometry, States geometry, <span class="keyword">Locate</span> float8, shape_leng <span class="built_in">numeric</span>) <span class="keyword">AS</span> $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    point_g geometry := ST_Transform(ST_SetSRID(ST_Point(lon, lat), <span class="number">4326</span>), <span class="number">3857</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">RETURN</span> <span class="keyword">QUERY</span> <span class="keyword">SELECT</span> ST_Transform(ST_SetSrid(ST_StartPoint(near_lines.geom), <span class="number">3857</span>), <span class="number">4326</span>) <span class="keyword">AS</span> StartPoint, </span><br><span class="line">                        ST_Transform(ST_SetSrid(ST_EndPoint(near_lines.geom), <span class="number">3857</span>), <span class="number">4326</span>) <span class="keyword">AS</span> EndPoint,</span><br><span class="line">                        ST_Transform(ST_ClosestPoint(ST_SetSRID(near_lines.geom, <span class="number">3857</span>), point_g), <span class="number">4326</span>) <span class="keyword">AS</span> States,</span><br><span class="line">                        ST_LineLocatePoint(ST_SetSRID(near_lines.geom, <span class="number">3857</span>), point_g) <span class="keyword">AS</span> <span class="keyword">Locate</span>,</span><br><span class="line">                        near_lines.shape_leng</span><br><span class="line">                 <span class="keyword">FROM</span> (</span><br><span class="line">                     <span class="keyword">SELECT</span> road.geom, road.shape_leng</span><br><span class="line">                     <span class="keyword">FROM</span> public.road</span><br><span class="line">                     <span class="keyword">WHERE</span> geom &lt;-&gt; point_g &lt; distance</span><br><span class="line">                 ) <span class="keyword">AS</span> near_lines;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$$ LANGUAGE 'plpgsql';</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> public.pif_GetStatesAtPosition(<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>)</span><br><span class="line">    OWNER <span class="keyword">TO</span> postgres;</span><br></pre></td></tr></table></figure><blockquote><p>为了避免投影误差，可以将所有结果中的坐标直接以 EPSJ:3857 坐标返回，下次调用时直接用这个坐标系的坐标。这样做同时也可以减少计算量。</p></blockquote><h3 id="Python-函数的编写"><a href="#Python-函数的编写" class="headerlink" title="Python 函数的编写"></a>Python 函数的编写</h3><p>使用 Python 调用这个函数时，直接使用 psycopg2 包查询该函数即可。对于返回结果进行处理，分别创建<code>State</code>对象，最后添加到<code>StateCollection</code>对象中，并返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_posibility_states</span><span class="params">(self, point: TaxiPoint, distance: float)</span>:</span></span><br><span class="line">    <span class="string">''' 获取最可能的状态</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    - `link_id`: 路段ID</span></span><br><span class="line"><span class="string">    - `point`: 要寻找的点。格式为(lon, lat)的二元组</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值: StateCollection</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    self.cur.execute(<span class="string">"SELECT startpoint, endpoint, states, locate, shape_leng "</span> +</span><br><span class="line">                     <span class="string">"FROM public.pif_getstatesatposition(%s, %s, %s)"</span>,</span><br><span class="line">                     (point.lng, point.lat, distance))</span><br><span class="line">    states = [] <span class="comment"># type: List[State]</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> self.cur:</span><br><span class="line">        start_point = row[<span class="number">0</span>] <span class="comment"># type: postgis.Point</span></span><br><span class="line">        end_point = row[<span class="number">1</span>] <span class="comment"># type: postgis.Point</span></span><br><span class="line">        closest_point = row[<span class="number">2</span>] <span class="comment"># type: postgis.Point</span></span><br><span class="line">        locate = row[<span class="number">3</span>] <span class="comment"># type: float</span></span><br><span class="line">        shape_leng = row[<span class="number">4</span>] <span class="comment"># type: float</span></span><br><span class="line">        link_id = ((start_point.x, start_point.y), (end_point.x, end_point.y))</span><br><span class="line">        cur_state = State(link_id, locate * float(shape_leng), point)</span><br><span class="line">        states.append(cur_state)</span><br><span class="line">    <span class="keyword">return</span> StateCollection(<span class="keyword">None</span>, states, LatLng(closest_point.y, closest_point.x), <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这种查询的方法同样适合于其他支持空间数据的数据库，以及其他类型的语言，例如 C# 和 Java 语言，数据库也可以换成 SQL Server 等其他数据库。问题在于，几乎运行前期绝大部分计算任务都在数据库中完成，数据库计算的压力会比较大，选择一个合适的数据库非常重要。</p></blockquote><h2 id="获取状态值间的最短路径"><a href="#获取状态值间的最短路径" class="headerlink" title="获取状态值间的最短路径"></a>获取状态值间的最短路径</h2><p>根据 PIF 算法的原理，将 GPS 点映射至 $ I^t $ 个元素的候选状态集合 $ \mathbf{x}^t = {x_1^t, x_2^t, ⋯, x_{I^t}^t} $ ，再映射至 $ J^t $ 个元素的路经集合。即对于 $ ∀x_i^t ∈ x^t, \mathbf{x}_i^{t+1} \in \mathbf{x}^{t+1} $，都构造一条路径。路径集记为 $ \mathbf{p}^t $，轨迹为：$$ τ = x_1p_1x_2⋯p_{t-1}x_t $$ PIF 会根据车辆轨迹计算概率，最终取概率最高的一条轨迹作为出租车 GPS 序列再地图上匹配得到的轨迹。</p><h3 id="数据库函数的编写"><a href="#数据库函数的编写" class="headerlink" title="数据库函数的编写"></a>数据库函数的编写</h3><p>PostgreSQL 数据库的插件 pgRouting 提供了路径规划的能力。在建立拓扑关系后，可以使用路径规划系列函数求解最短路径。</p><ul><li><code>pgr_dijkstra()</code>：使用 Dijkstra 算法求解的最短路径。除此之外，还有求解代价的 Dijkstra 函数。</li><li><code>pgr_aStar()</code>：使用 A* 算法求解最短路径。该系列函数即将不受官方支持。</li></ul><p>以<code>pgr_dijkstra()</code>为例，它的参数有：</p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>sql</code></td><td>文本</td><td>一个 SQL 查询。</td></tr><tr><td><code>source</code></td><td><code>int4</code></td><td>起点的 ID。</td></tr><tr><td><code>target</code></td><td><code>int4</code></td><td>终点的 ID。</td></tr><tr><td><code>directed</code></td><td><code>boolean</code></td><td>如果地图是有向的，那么为<code>ture</code>。</td></tr><tr><td><code>has_rcost</code></td><td><code>boolean</code></td><td>如果为<code>true</code>，SQL 查询的<code>reverse_cost</code>会被用来计算代价值。</td></tr></tbody></table><p>其中 SQL 查询形如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">source</span>, target, <span class="keyword">cost</span> [,reverse_cost] <span class="keyword">FROM</span> edge_table</span><br></pre></td></tr></table></figure><p>返回列有：</p><table><thead><tr><th>列名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td><code>int4</code></td><td>边的 ID。</td></tr><tr><td><code>source</code></td><td><code>int4</code></td><td>起点的 ID。</td></tr><tr><td><code>target</code></td><td><code>int4</code></td><td>终点的 ID。</td></tr><tr><td><code>cost</code></td><td><code>float</code></td><td>边的代价值。为负则不考虑此边</td></tr><tr><td><code>reverse_cost</code></td><td>可选</td><td>边的往返代价值。只在<code>directed</code>和<code>has_rcost</code>参数为<code>true</code>时使用。</td></tr></tbody></table><p>但是 pgRouting 提供的函数，只支持从路网数据的一个节点到另一个节点，也就是不支持任意两点间的最短路径。我们需要自己撰写函数来实现这一点。对于两个点 $ p_1,p_2 $，求解其间最短路径 $ p_1p_2$ 实现的思路如下：</p><ol><li>找到 $ p_1,p_2 $ 最近的线段 $ l_1, l_2$</li><li>找到 $ l_1 $ 的终点 $p_t$（即<code>target</code>值），和 $ l_2 $ 的起点 $p_s$（即<code>source</code>值）。</li><li>求解从<code>target</code>到<code>source</code>的最短路径 $ p $。</li><li>将 $ p $ 补上或删除 $ p_1p_t $ 和 $ p_sp_2 $ 两段。</li></ol><p>由于在 PIF 中， 要求解路径的点是两个状态值，都在路网上，因此，在搜索最近路段时，搜索范围可放小一点，如 1 m。</p><p>根据<a href="http://blog.csdn.net/longshengguoji/article/details/46793111" target="_blank" rel="noopener">博客</a>，具体函数实现如下（做了一些修改）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> <span class="string">"public"</span>.<span class="string">"pif_getpathbetweenpoints"</span>(<span class="string">"startx"</span> float8, <span class="string">"starty"</span> float8, <span class="string">"endx"</span> float8, <span class="string">"endy"</span> float8)</span><br><span class="line">  <span class="keyword">RETURNS</span> <span class="keyword">TABLE</span>(<span class="string">"shortest_path"</span> <span class="string">"public"</span>.<span class="string">"geometry"</span>, <span class="string">"path_cost"</span> float8) <span class="keyword">AS</span> $<span class="keyword">BODY</span>$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">tbl <span class="built_in">VARCHAR</span> := <span class="string">'road'</span>;</span><br><span class="line">v_point1 geometry := st_transform(st_setsrid(ST_Point(startx, starty), 4326), 3857);</span><br><span class="line">v_point2 geometry := st_transform(st_setsrid(ST_Point(endx, endy), 4326), 3857);</span><br><span class="line"></span><br><span class="line">    v_startLine geometry;<span class="comment">--离起点最近的线  </span></span><br><span class="line">    v_endLine geometry;<span class="comment">--离终点最近的线  </span></span><br><span class="line">      </span><br><span class="line">    v_startTarget integer;<span class="comment">--距离起点最近线的终点  </span></span><br><span class="line">    v_endSource integer;<span class="comment">--距离终点最近线的起点  </span></span><br><span class="line">  </span><br><span class="line">    v_statpoint geometry;<span class="comment">--在v_startLine上距离起点最近的点  </span></span><br><span class="line">    v_endpoint geometry;<span class="comment">--在v_endLine上距离终点最近的点  </span></span><br><span class="line">      </span><br><span class="line">    v_res geometry;<span class="comment">--最短路径分析结果  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    v_perStart float;<span class="comment">--v_statpoint在v_res上的百分比  </span></span><br><span class="line">    v_perEnd float;<span class="comment">--v_endpoint在v_res上的百分比  </span></span><br><span class="line">  </span><br><span class="line">    v_shPath geometry;<span class="comment">--最终结果</span></span><br><span class="line">    tempnode float;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="comment">--查询离起点最近的线  </span></span><br><span class="line">    <span class="keyword">select</span> geom, target</span><br><span class="line"><span class="keyword">from</span> road</span><br><span class="line"><span class="keyword">where</span>  ST_DWithin(geom, v_point1, <span class="number">3</span>) </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ST_Distance(geom, v_point1) <span class="keyword">limit</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">into</span> v_startLine ,v_startTarget;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">--查询离终点最近的线  </span></span><br><span class="line">    <span class="keyword">select</span> geom, <span class="keyword">source</span></span><br><span class="line"><span class="keyword">from</span> road </span><br><span class="line"><span class="keyword">where</span> ST_DWithin(geom, v_point2, <span class="number">3</span>) </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ST_Distance(geom, v_point2)  <span class="keyword">limit</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">into</span> v_endLine,v_endSource;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">--如果没找到最近的线，就返回null  </span></span><br><span class="line">    if (v_startLine is null) or (v_endLine is null) then  </span><br><span class="line">        return;  </span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span> ;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">select</span>  ST_ClosestPoint(v_startLine, v_point1) <span class="keyword">into</span> v_statpoint;  </span><br><span class="line">    <span class="keyword">select</span>  ST_ClosestPoint(v_endLine, v_point2) <span class="keyword">into</span> v_endpoint;  </span><br><span class="line">  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">--最短路径  </span></span><br><span class="line">    <span class="keyword">execute</span> <span class="string">'SELECT st_linemerge(st_union(b.geom)) '</span> || </span><br><span class="line">    <span class="string">'FROM pgr_kdijkstraPath(  </span></span><br><span class="line"><span class="string">    ''SELECT gid as id, source, target, cost FROM road '','</span>  </span><br><span class="line">    ||v_startTarget || <span class="string">', '</span> ||<span class="string">'array['</span>||v_endSource||<span class="string">'] , false, false  </span></span><br><span class="line"><span class="string">    ) a, '</span>  </span><br><span class="line">    || tbl || <span class="string">' b  </span></span><br><span class="line"><span class="string">    WHERE a.id3=b.gid  </span></span><br><span class="line"><span class="string">    GROUP by id1  </span></span><br><span class="line"><span class="string">    ORDER by id1'</span> <span class="keyword">into</span> v_res ;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">--如果找不到最短路径，就返回null  </span></span><br><span class="line">    <span class="comment">--if(v_res is null) then  </span></span><br><span class="line">    <span class="comment">--    return null;  </span></span><br><span class="line">    <span class="comment">--end if;  </span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">--将v_res,v_startLine,v_endLine进行拼接  </span></span><br><span class="line">    <span class="keyword">select</span>  st_linemerge(ST_Union(<span class="built_in">array</span>[v_res,v_startLine,v_endLine])) <span class="keyword">into</span> v_res;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">select</span>  ST_LineLocatePoint(v_res, v_statpoint) <span class="keyword">into</span> v_perStart;  </span><br><span class="line">    <span class="keyword">select</span>  ST_LineLocatePoint(v_res, v_endpoint) <span class="keyword">into</span> v_perEnd;  </span><br><span class="line"></span><br><span class="line">if(v_perStart &gt; v_perEnd) then  </span><br><span class="line">        tempnode =  v_perStart;</span><br><span class="line">v_perStart = v_perEnd;</span><br><span class="line">v_perEnd = tempnode;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">--截取v_res  </span></span><br><span class="line">    <span class="keyword">SELECT</span> ST_LineSubString(v_res,v_perStart, v_perEnd) <span class="keyword">into</span> v_shPath;  </span><br><span class="line">       </span><br><span class="line">    RETURN QUERY <span class="keyword">SELECT</span> st_transform(v_shPath, <span class="number">4326</span>), st_length(v_shPath);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$<span class="keyword">BODY</span>$</span><br><span class="line">  <span class="keyword">LANGUAGE</span> plpgsql VOLATILE</span><br><span class="line">  <span class="keyword">COST</span> <span class="number">100</span></span><br><span class="line">  <span class="keyword">ROWS</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><blockquote><p>修改的地方：</p><ol><li>固定了要查询的表。</li><li>将结果转换为 WGS84 坐标系。</li><li>在返回路径的同时返回了整个路径的长度。</li></ol></blockquote><h3 id="Python-调用函数的编写"><a href="#Python-调用函数的编写" class="headerlink" title="Python 调用函数的编写"></a>Python 调用函数的编写</h3><p>与之前类似，Python 调用函数的实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPaths</span><span class="params">(self, s1: State, s2: State)</span>:</span></span><br><span class="line">    <span class="string">''' 获取两个状态之间的路径</span></span><br><span class="line"><span class="string">    利用ArcPy获取路网上两点之间的最短路径</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 创建要素</span></span><br><span class="line">    <span class="keyword">if</span> s1.link_id == s2.link_id:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    cur = self.conn.cursor() <span class="comment"># type: psycopg2.extensions.cursor</span></span><br><span class="line">    cur.execute(<span class="string">"SELECT * FROM PIF_GetPathBetweenPoints(%s, %s, %s, %s)"</span>,</span><br><span class="line">                (s1.gps_pos.lng, s1.gps_pos.lat, s2.gps_pos.lng, s2.gps_pos.lat))</span><br><span class="line">    (linestring, cost) = cur.fetchone()  <span class="comment"># type: LineString</span></span><br><span class="line">    path = [((p1.x, p1.y), (p2.x, p2.y))</span><br><span class="line">            <span class="keyword">for</span> (p1, p2) <span class="keyword">in</span> zip(linestring[<span class="number">1</span>:<span class="number">-2</span>], linestring[<span class="number">2</span>:<span class="number">-1</span>])]</span><br><span class="line">    <span class="keyword">del</span> cur</span><br><span class="line">    <span class="keyword">return</span> [(s1, [s1.link_id] + path + [s2.link_id], s2, cost)]</span><br></pre></td></tr></table></figure><h2 id="路径结果后处理"><a href="#路径结果后处理" class="headerlink" title="路径结果后处理"></a>路径结果后处理</h2><p>在 PIF 核心库中，对两个车辆状态 $ x_i^{t} \in \mathbf{x}^{t} ,x_j^{t+1} \in \mathbf{x}^{t+1} $ 中间的路径 $ p_i $ 有要求。即 $ x_i^{t} $ 所在的路段的 ID 和 $x_j^{t+1}$ 所在路段的 ID 分别和 $ p_i $ 第一个路段的 ID 和 最后一个路段的 ID 相同。在不直接使用路段的 ID 作为最短路径搜索的返回值时，我们需要做一些处理。</p><blockquote><p>产生这个问题原因，是 PIF 库的示例代码中，采用 $ ((x_S, y_S), (x_T, y_T)) $ 来表示 $ x_i^{t} $ 所在的路段 ID。若记获取某个状态值所在路段的 ID 的函数是 $ \mathbf{id}(x) $，则要求 $ \mathbf{id}(x_i^{t}) = \overrightarrow{ST} = (p_i)_1 $，$ S, T $ 是路段的起点和终点。同理，$ \mathbf{id}(x_i^{t}) = \overrightarrow{ST} = (p_i)_{-1} $（$(p_i)_{-1}$ 表示最后一个搜索到的路径的最后一个路段）。</p></blockquote><p>对于起始状态，理论上共有 6 种可能。如下图所示。记起始状态点为 $X$，其可能的 6 种情况分别为 $ \left\lbrace x_1, x_2, \cdots, x_6 \right\rbrace $，其所在路段 $ \mathbf{l} = \overrightarrow{ST}$ 起点为 $S$，终点为 $T$，匹配到的整个路径为 $ P $。记符号 $ \lnot \mathbf{L} = \overrightarrow{TS} $。</p><img src="/科研工作/implementation-pif/start-state-process.png" title="起始状态的处理"><p>对于每个 $ X \in \left\lbrace x_1, x_2, \cdots, x_6 \right\rbrace $</p><ol><li>$ X = x_1 \neq S \neq T \wedge T = P_2 $ ：这是最一般的情况。只需令 $ P = \left\lbrace S \right \rbrace \cup P $ 即可。</li><li>$ X = S \wedge T = P_2 $ ：此种情况无需处理。</li><li>$ X = T \wedge S \neq P_2 $ ：令 $ P = \left\lbrace S \right \rbrace \cup P $。</li><li>$ X = x_1 \neq S \neq T \wedge S = P_2 $ ：令 $ \mathbf{id}(X) = \lnot \mathbf{l} $。</li><li>$ X = S \wedge T \neq P_2 $ ：令 $ P = \left\lbrace T \right \rbrace \cup P $，且 $ \mathbf{id}(X) = \lnot \mathbf{l} $。</li><li>$ X = T \wedge S = P_2 $ ：令 $ \mathbf{id}(X) = \lnot \mathbf{l} $。</li></ol><p>对于结束状态，可能的情况如下图。</p><img src="/科研工作/implementation-pif/end-state-process.png"><p>处理方法可与上同理。</p><blockquote><p>由于 pgRouting 的问题，好像会给求得的路径按照坐标大小排个序？我目前遇到过一次，因此，在进行上述处理之前，判断一下，起始状态和结束状态的坐标值是不是分别和路径的第一个点和最后一个点相同，如果不是，把路径反过来。</p></blockquote><blockquote><p>在理论上，上述 6 种情况是合理的。但是在实际运行过程中，竟然产生了 $$ X = x_1 \neq S \neq T \wedge T = P_2 \wedge S = P_2 $$ 的情况，因此还需要做一个处理。如果上述 6 种情况都不满足，视为没找到路径。</p></blockquote><h1 id="利用-ArcPy-实现调用-PIF-算法"><a href="#利用-ArcPy-实现调用-PIF-算法" class="headerlink" title="利用 ArcPy 实现调用 PIF 算法"></a>利用 ArcPy 实现调用 PIF 算法</h1>]]></content>
      
      <categories>
          
          <category> 科研工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路网速度 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitWeb 的安装和配置</title>
      <link href="/Git/gitweb/"/>
      <content type="html"><![CDATA[<blockquote><p>本文转载并整合自</p><ul><li><a href="http://blog.cs-tao.cc/2017/10/19/gitweb安装和配置/" target="_blank" rel="noopener">梦觉知晓的博客</a></li><li><a href="http://gengcheng.cn/archives/5.html" target="_blank" rel="noopener">树莓派上搭建 gitweb</a></li></ul><p>有修改。</p></blockquote><p>Git提供了一个CGI脚本，来搭建一个网页端Git版本库可视化工具，这个工具就是GitWeb。本文提供基于Ubuntu Mate的搭建过程，并在树莓派上试验成功。<a id="more"></a></p><h1 id="基本搭建"><a href="#基本搭建" class="headerlink" title="基本搭建"></a>基本搭建</h1><p>基本的搭建GitWeb的步骤如下：</p><ol><li><p>安装GitWeb和Apache</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gitweb lighttpd highlight markdown</span><br></pre></td></tr></table></figure></li><li><p>修改文件：<code>/etc/gitweb.conf</code>，该文件功能是设置项目集根目录、临时文件目录、布局文件位置及资源文件位置等：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$projectroot</span> = <span class="string">"/home/git/repositories"</span>;            <span class="comment"># Git仓库的根目录</span></span><br><span class="line"><span class="variable">$git_temp</span> = <span class="string">"/tmp"</span>;                                 <span class="comment"># 临时文件鲁姆</span></span><br><span class="line"><span class="variable">$projects_list</span> = <span class="variable">$projectroot</span>;</span><br><span class="line">@stylesheets = (<span class="string">"../gitweb/static/gitweb.css"</span>);     <span class="comment"># 页面的样式表</span></span><br><span class="line"><span class="variable">$javascript</span> = <span class="string">"../gitweb/static/gitweb.js"</span>;         <span class="comment"># 页面的脚本文件</span></span><br><span class="line"><span class="variable">$logo</span> = <span class="string">"../gitweb/static/git-logo.png"</span>;            <span class="comment"># 页面Logo</span></span><br><span class="line"><span class="variable">$favicon</span> = <span class="string">"../gitweb/static/git-favicon.png"</span>;</span><br><span class="line">@diff_opts = ();</span><br><span class="line"><span class="variable">$feature</span>&#123;<span class="string">'highlight'</span>&#125;&#123;<span class="string">'default'</span>&#125; = [1];             <span class="comment"># 开启代码高亮支持</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>/usr/share/gitweb/gitweb.cgi</code>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">our <span class="variable">$projectroot</span> = <span class="string">"/home/git"</span>; <span class="comment"># 修改为Git仓库的根目录</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>/etc/lighttpd/lighttpd.conf</code>，添加CGI支持：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url.redirect += ( <span class="string">"^/gitweb$"</span> =&gt; <span class="string">"/gitweb/"</span> )</span><br><span class="line">alias.url += (<span class="string">"/gitweb/"</span> =&gt; <span class="string">"/usr/share/gitweb/"</span>)</span><br><span class="line"><span class="variable">$HTTP</span>[<span class="string">"url"</span>] =~ <span class="string">"^/gitweb/"</span> &#123;</span><br><span class="line">    cgi.assign = (<span class="string">".cgi"</span> =&gt; <span class="string">"/usr/bin/perl"</span>)</span><br><span class="line">    server.indexfiles = (<span class="string">"index.cgi"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建认证文件：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -c 认证文件位置 用户名</span><br></pre></td></tr></table></figure></li><li><p>配置Apache，使我们可以访问到GitWeb。修改<code>/etc/apache2/conf-available/gitweb.conf</code>文件，该文件的功能是指定CGI文件位置、认证文件位置等。修改后的文件如下（原始文件会有几行和这个重复，直接查找即可：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfDefine ENABLE_GITWEB&gt;</span><br><span class="line">    Alias /gitweb /usr/share/gitweb</span><br><span class="line"></span><br><span class="line">    &lt;Directory /usr/share/gitweb&gt;</span><br><span class="line">        Options +FollowSymLinks +ExecCGI</span><br><span class="line">        AddHandler cgi-script .cgi</span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthName &quot;Restricted Content&quot;</span><br><span class="line">        AuthUserFile /home/git/.htpasswd # 这里是认证文件的位置</span><br><span class="line">        Require  valid-user</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/IfDefine&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动CGI支持：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo lighty-enable-mod cgi</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></li></ol><h1 id="附加功能"><a href="#附加功能" class="headerlink" title="附加功能"></a>附加功能</h1><h2 id="更改GitWeb主题"><a href="#更改GitWeb主题" class="headerlink" title="更改GitWeb主题"></a>更改GitWeb主题</h2><p>克隆别人写好的GitWeb主题即可，位置位于GitHub的<a href="https://github.com/kogakure/gitweb-theme" target="_blank" rel="noopener">kogakure/gitweb-theme</a>仓库中。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/gitweb</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/kogakure/gitweb-theme.git</span><br><span class="line">mv static static.bak</span><br><span class="line">mv gitweb-theme static</span><br></pre></td></tr></table></figure></p><h2 id="增加Mardown格式的README-md文件的支持"><a href="#增加Mardown格式的README-md文件的支持" class="headerlink" title="增加Mardown格式的README.md文件的支持"></a>增加Mardown格式的README.md文件的支持</h2><p>编辑/usr/share/gitweb/gitweb.cgi，在sub git_sumary（大约在第6400行，可使用编辑器的搜索功能）中加入以下代码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="variable">$prevent_xss</span>) &#123;</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="string">"README.md"</span>;</span><br><span class="line">    my <span class="variable">$proj_head_hash</span> = git_get_head_hash(<span class="variable">$project</span>);</span><br><span class="line">    my <span class="variable">$readme_blob_hash</span> = git_get_hash_by_path(<span class="variable">$proj_head_hash</span>, <span class="string">"README.md"</span>, <span class="string">"blob"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$readme_blob_hash</span>) &#123; <span class="comment"># if README.md exists                                                                                                                                                      </span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">"&lt;div class=\"header\"&gt;README.md&lt;/div&gt;\n"</span>;</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"&lt;div class=\"readme page_body\"&gt;"</span>;                                                                                                  </span><br><span class="line">    my <span class="variable">$cmd_markdownify</span> = <span class="variable">$GIT</span> . <span class="string">" "</span> . git_cmd() . <span class="string">" cat-file blob "</span> . <span class="variable">$readme_blob_hash</span> . <span class="string">" | markdown |"</span>;</span><br><span class="line">    open FOO, <span class="variable">$cmd_markdownify</span> or die_error(500, <span class="string">"Open git-cat-file blob '<span class="variable">$hash</span>' failed"</span>);</span><br><span class="line">    <span class="keyword">while</span> (&lt;FOO&gt;) &#123;</span><br><span class="line">        <span class="built_in">print</span> to_utf8(<span class="variable">$_</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(FOO);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">"&lt;/div&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="第二种认证模块添加方式"><a href="#第二种认证模块添加方式" class="headerlink" title="第二种认证模块添加方式"></a>第二种认证模块添加方式</h2><ol><li><p>添加认证模块</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apache2-utils</span><br><span class="line">sudo lighty-enable-mod auth</span><br><span class="line">sudo /etc/init.d/lighttpd restart</span><br></pre></td></tr></table></figure></li><li><p>创建用户密码文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/lighttpd</span><br><span class="line">htdigest -c lighttpd.user  <span class="string">'Enter Password'</span> your_name</span><br></pre></td></tr></table></figure></li><li><p>修改<code>/etc/lighttpd/lighttpd.conf</code>配置文件，添加以下内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">auth.backend = <span class="string">"htdigest"</span></span><br><span class="line">auth.backend.htdigest.userfile = <span class="string">"/etc/lighttpd/lighttpd.user"</span></span><br><span class="line">auth.require = ( <span class="string">"/gitweb"</span> =&gt;</span><br><span class="line">(</span><br><span class="line">    <span class="string">"method"</span> =&gt; <span class="string">"digest"</span>,</span><br><span class="line">    <span class="string">"realm"</span> =&gt; <span class="string">"Enter Password"</span>,</span><br><span class="line">    <span class="string">"require"</span> =&gt; <span class="string">"user=your_name"</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure></li></ol><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="GitWeb文件权限问题"><a href="#GitWeb文件权限问题" class="headerlink" title="GitWeb文件权限问题"></a>GitWeb文件权限问题</h2><p>如果提示如下错误：</p><img src="/Git/gitweb/interval-server-error.png"><p>参考下面的解决方式：</p><blockquote><p>需要将<code>/usr/share/gitweb</code>文件夹下的文件和文件夹设置正确的权限，&lt;其他用户&gt;必须有读取文件权限和执行文件权限。缺少读文件的权限服务器会返回”Internal Server Error(500)”错误，缺少执行文件的权限服务器会返回”Forbidden(403)”错误。读取文件权限为4，执行文件权限为1，也就是说&lt;其他用户&gt;的权限至少为’5’。如下，笔者设置的’755’权限的最后一个’5’对应&lt;其他用户&gt;的权限。</p></blockquote><p>即将<code>/usr/share/gitweb</code>文件夹如下设置权限：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/gitweb/</span><br><span class="line">sudo chmod -R 755 .</span><br></pre></td></tr></table></figure></p><h2 id="旧版本Apache配置文件"><a href="#旧版本Apache配置文件" class="headerlink" title="旧版本Apache配置文件"></a>旧版本Apache配置文件</h2><p>旧版本Apache的/etc/apache2/conf.d/gitweb和新版本的/etc/apache2/conf-available/gitweb的是同一个目录。按照同样的方法设置即可。</p>]]></content>
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用TypeScript编写爬虫</title>
      <link href="/%E7%88%AC%E8%99%AB/crawler-cheerio-ts/"/>
      <content type="html"><![CDATA[<p>我们需要的数据多种多样，不可能什么都买，就算有钱，有的数据也不一定能买到。这个时候要获取这些数据，就要靠爬虫了。</p><p>爬虫界大佬很多，开源库和框架数不胜数。理论上，凡是能方便连接互联网的编程语言，都适合用来写爬虫，比如C#、Java、JavaScript、Python等，当然还有用R、Matlab这些有点专业特色的语言写爬虫的，甚至用curl和Bash都可以写爬虫，只是好像较少听说过有用C++写爬虫的。我分别用过C#这种编译语言（Java应该类似）和JavaScript这种脚本语言写过多款爬虫，个人总结起来两种语言各有特色：</p><ul><li>编译语言每次修改爬虫都要编译，我电脑比较渣，每次编译都要花点时间。但是可以轻松通过类型检查，保证每次GET参数的正确、返回值的直接解析等非常使用的功能。</li><li>脚本语言每次修改就可以直接运行了，但是填参数的时候就比较头疼了，需要反复检查有哪些参数、该填什么值，保证请求参数的格式正确。</li></ul><p>自从学会了TypeScript之后，我个人就比较喜欢JavaScript和TypeScript语言，结合Node.js，可以达到比较好的写爬虫的效果，结合了编译语言和脚本语言共有的特点。只是搞得脚本有点复杂了，需要声明很多类型，指定变量类型……其实也是一个挺复杂的工作。虽然有点不像脚本，不够简洁，但能够提供类型检查还是省了不少事。</p><p>下面记录一下这次使用TypeScript编写爬虫的过程，以备后用。<a id="more"></a></p><h1 id="库的使用"><a href="#库的使用" class="headerlink" title="库的使用"></a>库的使用</h1><p>主要使用了下面两个库：</p><ul><li>web-request</li><li>cheerio</li></ul><h2 id="WebRequest：同步化的request请求"><a href="#WebRequest：同步化的request请求" class="headerlink" title="WebRequest：同步化的request请求"></a>WebRequest：同步化的request请求</h2><p>为什么要用<code>await</code>同步化request请求呢？不仅仅是因为<code>await</code>关键字是TypeScript和新JavaScript标准的特性，其实有很多比较好的用途：</p><ul><li>避开JavaScript“回调大坑”。我个人还挺喜欢JavaScript以回调的方式异步化同步操作，曾经在爬虫的时候写了一个全回调的爬虫，<code>fs</code>库中有同步版本的函数都没有用其同步版本，全都是异步版本。事实证明，在高速爬虫的时候，使用异步版本的函数确实提高了爬虫效率。但是，编写起来那个<strong>痛苦</strong>啊。如果需要从返回的值里面判断还有没有下一页了，就要不停地递归啊。这真的是回调大坑，难读、难写、难调试。以至于后来再写爬虫，都避免爬虫过程中判断是否有下一页，都是提前算好有多少页，然后硬编码的，这样反而会节省很多时间。但是使用同步化的过程就比较好实现了。</li><li>减少因JavaScript的回调和闭包造成的错误。再爬虫的时候，为了防反爬，最简单的办法是人工设定等待时间，让爬虫慢一点。由于JavaScript回调的特点，笔者多次尝试，发现只能使用<code>setInterval()</code>函数实现。但是使用TypeScirpt的await关键字，可以直接编写一个<code>delay()</code>函数，让程序等待。</li></ul><p>这个库的大多数用法和<code>request</code>库差不多，配置也是直接采用的<code>request</code>库的配置，只是可以以同步的方式编写异步代码，姑且称之为“同步化”把。例如，获取一个get请求的相应就是：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> WebRequest <span class="keyword">from</span> <span class="string">'web-request'</span></span><br><span class="line"><span class="keyword">var</span> list_response = <span class="keyword">await</span> WebRequest.get(<span class="string">`<span class="subst">$&#123;site.url&#125;</span>/pg<span class="subst">$&#123;i + 1&#125;</span>/`</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>这里面使用<code>site.url</code>变量存储要访问的网页的基本地址，后面代表了页数。</p></blockquote><p>全局配置的方法也和<code>request</code>库差不多，只是不需要返回一个新的<code>request</code>对象<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebRequest.defaults(&#123;jar: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>这里配置了使用Cookie。</p></blockquote><p>我在上一次写高德API爬虫的时候，首次依靠同步化的request请求，完成了自动分析页数。瞬间感觉给人生节约了很多时间。</p><h2 id="cheerio：提供jQuery-Selector的解析能力"><a href="#cheerio：提供jQuery-Selector的解析能力" class="headerlink" title="cheerio：提供jQuery Selector的解析能力"></a>cheerio：提供jQuery Selector的解析能力</h2><p>在做前端的时候，定位一个元素，最常用的就是jQuery的Selector字符串。在Node.js中，可以使用cheerio这个简化的jQuery库来实现这一操作。</p><p>使用cheerio的方法很简单，就三步：</p><ul><li><p>导入cheerio包：</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cheerio <span class="keyword">from</span> <span class="string">'cheerio'</span></span><br></pre></td></tr></table></figure></li><li><p>创建<code>$</code>对象（<code>body</code>变量代表了HTML响应正文）</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = cheerio.load(body);</span><br></pre></td></tr></table></figure></li><li><p>使用jQuery Selector即可（<code>info_object.max_num</code>是用于存储某个值的变量）</p>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info_object.max_num = <span class="built_in">parseInt</span>($(<span class="string">"body div.content div.leftContent div.resultDes.clear h2.total.fl span"</span>).text().trim());</span><br></pre></td></tr></table></figure></li></ul><p>一般大型网页的页面都非常复杂，仅仅依靠分析HTML源码，可能毫无头绪。但是，使用浏览器的开发人员工具就非常方便啦，不仅可以直接快速定位页面元素，还可以直接给出Selector表达式。<img src="/爬虫/crawler-cheerio-ts/开发人员工具.jpg" title="开发人员工具中的Selector指示器"></p><p>爬虫软件“八爪鱼”使用的是XPath表达式来定位页面元素（至少他的软件UI是这样做的）。我也尝试使用XPath，但是，由于HTML一些随意性，往往导致解析出错。而且，既然是网页，使用jQuery Selector表达式更简洁，更合适。</p><p>也有人说可以直接使用正则。确实可以，但是正则还要自己想是不是，如果有些复杂的正则还是挺费事的。用这个可以让开发人员工具自动分析，应该是更方便啊，除非你的电脑只有命令行。</p><p>当然，也不是什么都需要使用Selector表达式来定位的。如果只是像把坐标提出来，或者有一些其他特定的模式，直接使用正则表达式啊，比如<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coord_string = <span class="regexp">/114.[0-9]*,30.[0-9]*/g</span>.exec(body)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><p>这样就提取出来了经纬度坐标，而这个坐标是隐藏在页面一个<code>script</code>标签中的一个变量里。</p><p>不过这种方式有点问题。如果页面上的某些标签是使用脚本添加的，可能开发人员工具给出的Selector路径，不一定能在HTML源代码里找到。但是如果很重要的数据是通过前端脚本渲染上去的，那肯定会在一个变量里面保存这些数据。这个时候直接揪出这个变量就可以了，万事大吉，还不用自己去提取HTML元素。</p><h1 id="TypeScript编写爬虫"><a href="#TypeScript编写爬虫" class="headerlink" title="TypeScript编写爬虫"></a>TypeScript编写爬虫</h1><p>既然使用TypeScript便写爬虫，那么就使用一些TypeScript的特性吧。首先应该就是TypeScript的类型化特点。当然还少不了<code>await</code>关键字。</p><h2 id="API参数的类型化"><a href="#API参数的类型化" class="headerlink" title="API参数的类型化"></a>API参数的类型化</h2><p>一个请求的请求参数往往是确定的，在一个开放API中都会给出。你所想要的数据类型是固定的，这个要看你的需求。类型化编写爬虫的方式，就是保证这两个过程不出错。</p><p>例如，在利用高德API获取POI的时候，参数在文档中明确指出了（<a href="http://lbs.amap.com/api/webservice/guide/api/search" target="_blank" rel="noopener">高德地图API文档</a>）。我们如果照着这样的文档，编写一个接口或者一个类，可以实现一些自动化功能。同样，返回结果也可以编写一个类型，直接在构造函数中实现一些对结果的处理。</p><p>例如，对高德搜索的API进行类型化。首先创建一个接口，表示一些除了key之外的参数<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 输出结果的格式 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> GaodePoiOutput &#123;</span><br><span class="line">    <span class="built_in">JSON</span>, XML</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 接口参数类型 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IGaodePoiApi &#123;</span><br><span class="line">    keywords: <span class="built_in">string</span>[];</span><br><span class="line">    types: <span class="built_in">string</span>[];</span><br><span class="line">    city?: <span class="built_in">string</span>;</span><br><span class="line">    citylimit?: <span class="built_in">boolean</span>;</span><br><span class="line">    children?: <span class="built_in">number</span>;</span><br><span class="line">    offset?: <span class="built_in">number</span>;</span><br><span class="line">    page?: <span class="built_in">number</span>;</span><br><span class="line">    building?: <span class="built_in">number</span>;</span><br><span class="line">    floor?: <span class="built_in">number</span>;</span><br><span class="line">    extensions?: <span class="built_in">string</span>;</span><br><span class="line">    output?: GaodePoiOutput;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后，编写一个类，让其提供自动根据上述参数类型生成url的功能<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> GaodePoiApi &#123;</span><br><span class="line">    baseurl: <span class="built_in">string</span>;</span><br><span class="line">    key: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.baseurl = <span class="string">"http://restapi.amap.com/v3/place/text"</span></span><br><span class="line">        <span class="keyword">this</span>.key = key; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取参数指定的POI</span></span><br><span class="line"><span class="comment">     * @param parameters 请求参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getUrl(parameters: IGaodePoiApi): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">`<span class="subst">$&#123;this.baseurl&#125;</span>?key=<span class="subst">$&#123;this.key&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> parameters) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parameters.hasOwnProperty(key)) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"keywords"</span>:</span><br><span class="line">                        <span class="keyword">if</span> (parameters.keywords.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            url += <span class="string">`&amp;<span class="subst">$&#123;key&#125;</span>=`</span>;</span><br><span class="line">                            url += parameters.keywords[<span class="number">0</span>]</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">1</span>; index &lt; parameters.keywords.length; index++) &#123;</span><br><span class="line">                                <span class="keyword">var</span> element = parameters.keywords[index];</span><br><span class="line">                                url += <span class="string">`|<span class="subst">$&#123;parameters.keywords[index]&#125;</span>`</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"types"</span>:</span><br><span class="line">                        <span class="keyword">if</span> (parameters.types.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            url += <span class="string">`&amp;<span class="subst">$&#123;key&#125;</span>=`</span>;</span><br><span class="line">                            url += parameters.types[<span class="number">0</span>]</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">1</span>; index &lt; parameters.keywords.length; index++) &#123;</span><br><span class="line">                                <span class="keyword">var</span> element = parameters.keywords[index];</span><br><span class="line">                                url += <span class="string">`|<span class="subst">$&#123;parameters.keywords[index]&#125;</span>`</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"output"</span>:</span><br><span class="line">                        url += <span class="string">`&amp;<span class="subst">$&#123;key&#125;</span>=`</span>;</span><br><span class="line">                        <span class="keyword">switch</span> (parameters.output) &#123;</span><br><span class="line">                        <span class="keyword">case</span> GaodePoiOutput.XML:</span><br><span class="line">                            url += <span class="string">"XML"</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            url += <span class="string">"JSON"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        url += <span class="string">`&amp;<span class="subst">$&#123;key&#125;</span>=`</span>;</span><br><span class="line">                        url += <span class="string">`<span class="subst">$&#123;parameters[key]&#125;</span>`</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样直接调用<code>GaodePoiApi</code>对象的<code>getUrl()</code>函数即可生成需要的请求。</p><p>为什么不用request库的qs配置参数呢？这个参数其实非常坑，在高德API、百度API这种特别复杂的请求参数要求下，往往会出现问题。例如，如果一个参数可以是一个数组，你却不能直接把这个参数的值写成数组，这样会出现问题，只能手动利用将其变成字符串。我一开始使用的是<code>querystring.stringify()</code>函数，直接将qs对象序列化成字符串，但是后来发现还是有问题。但是使用TypeScript这样做之后，就觉得更加合理，一些复杂的参数格式也更加可控。</p><h2 id="请求结果的类型化"><a href="#请求结果的类型化" class="headerlink" title="请求结果的类型化"></a>请求结果的类型化</h2><h3 id="开放API的示例"><a href="#开放API的示例" class="headerlink" title="开放API的示例"></a>开放API的示例</h3><p>如在爬取高德地图API的时候，返回一个JSON时，可以直接将其指定一个类型，方便后面的操作。例如：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 高德POI搜索结果模型 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IGaodePoiSearchResultModel &#123;</span><br><span class="line">    status: <span class="built_in">string</span>;</span><br><span class="line">    info?: <span class="built_in">string</span>;</span><br><span class="line">    infocode?: <span class="built_in">string</span>;</span><br><span class="line">    count?: <span class="built_in">string</span>;</span><br><span class="line">    pois?: IGaodePoiModel[];</span><br><span class="line">    suggestion?: IGaodePoiSearchSuggestionsModel[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 高德地图API */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> GaodePoi &#123;</span><br><span class="line">    id: <span class="built_in">string</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    typecode: <span class="built_in">string</span>;</span><br><span class="line">    biz_type: <span class="built_in">any</span>[];</span><br><span class="line">    address: <span class="built_in">string</span>;</span><br><span class="line">    gjclng: <span class="built_in">number</span>;</span><br><span class="line">    gjclat: <span class="built_in">number</span>;</span><br><span class="line">    wgslng: <span class="built_in">number</span>;</span><br><span class="line">    wgslat: <span class="built_in">number</span>;</span><br><span class="line">    tel: <span class="built_in">string</span>;</span><br><span class="line">    distance: <span class="built_in">any</span>[];</span><br><span class="line">    biz_ext: <span class="built_in">any</span>[];</span><br><span class="line">    pname: <span class="built_in">string</span>;</span><br><span class="line">    cityname: <span class="built_in">string</span>;</span><br><span class="line">    adname: <span class="built_in">string</span>;</span><br><span class="line">    importance: <span class="built_in">any</span>[];</span><br><span class="line">    shopid: <span class="built_in">any</span>[];</span><br><span class="line">    shopinfo: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">    poiweight: <span class="built_in">any</span>[];</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">parameters: IGaodePoiModel</span>) &#123;</span><br><span class="line">        <span class="comment">// 复制属性</span></span><br><span class="line">        <span class="keyword">this</span>.id = parameters.id;</span><br><span class="line">        <span class="keyword">this</span>.name = parameters.name;</span><br><span class="line">        <span class="keyword">this</span>.typecode = parameters.typecode;</span><br><span class="line">        <span class="keyword">this</span>.biz_type = parameters.biz_type;</span><br><span class="line">        <span class="keyword">this</span>.address = parameters.address;</span><br><span class="line">        <span class="keyword">this</span>.tel = parameters.tel;</span><br><span class="line">        <span class="keyword">this</span>.distance = parameters.distance;</span><br><span class="line">        <span class="keyword">this</span>.biz_ext = parameters.biz_ext;</span><br><span class="line">        <span class="keyword">this</span>.pname = parameters.pname;</span><br><span class="line">        <span class="keyword">this</span>.cityname = parameters.cityname;</span><br><span class="line">        <span class="keyword">this</span>.adname = parameters.adname;</span><br><span class="line">        <span class="keyword">this</span>.importance = parameters.importance;</span><br><span class="line">        <span class="keyword">this</span>.shopid = parameters.shopid;</span><br><span class="line">        <span class="keyword">this</span>.shopinfo = parameters.shopinfo;</span><br><span class="line">        <span class="keyword">this</span>.poiweight = parameters.poiweight;</span><br><span class="line">        <span class="comment">// 计算坐标</span></span><br><span class="line">        <span class="keyword">var</span> coords = parameters.location.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">this</span>.gjclng = <span class="built_in">parseFloat</span>(coords[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">this</span>.gjclat = <span class="built_in">parseFloat</span>(coords[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">var</span> wgs = coordtransform.gcj02towgs84(<span class="keyword">this</span>.gjclng, <span class="keyword">this</span>.gjclat)</span><br><span class="line">        <span class="keyword">this</span>.wgslng = wgs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>.wgslat = wgs[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> getFields(): <span class="built_in">string</span>[] &#123;</span><br><span class="line">        <span class="keyword">return</span> [ <span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"typecode"</span>, <span class="string">"biz_type"</span>, <span class="string">"address"</span>, <span class="string">"gjclng"</span>, <span class="string">"gjclat"</span>, <span class="string">"wgslng"</span>, <span class="string">"wgslat"</span>, <span class="string">"tel"</span>, <span class="string">"distance"</span>, <span class="string">"biz_ext"</span>, <span class="string">"pname"</span>, <span class="string">"cityname"</span>, <span class="string">"adname"</span>, <span class="string">"importance"</span>, <span class="string">"shopid"</span>, <span class="string">"shopinfo"</span>, <span class="string">"poiweight"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里面在构造函数中，调用了坐标转换库，转换了获取到的坐标。这个过程在获取结果时，在构造的过程中自动调用。</p><p>具体程序示例请参考：<a href="https://github.com/HPDell/download-gaode-poi" target="_blank" rel="noopener">download-gaode-poi</a></p><h3 id="HTML页面的示例"><a href="#HTML页面的示例" class="headerlink" title="HTML页面的示例"></a>HTML页面的示例</h3><p>如果不是爬开放API，类型化也有一定的作用。例如爬取列表的时候，或者详细信息的时候，可以知道哪些属性时需要爬的，以及还有哪些属性没有爬下来。例如这段类型的声明<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ErshoufangListItem &#123;</span><br><span class="line">    id: <span class="built_in">string</span>;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">    link: <span class="built_in">string</span>;</span><br><span class="line">    property: <span class="built_in">string</span>;</span><br><span class="line">    propertylink: <span class="built_in">string</span>;</span><br><span class="line">    tags: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">    total_price: <span class="built_in">number</span>;</span><br><span class="line">    unit_price: <span class="built_in">number</span>;</span><br><span class="line">    type_time: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">self?: ErshoufangListItem</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tags = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (self) &#123;</span><br><span class="line">            <span class="keyword">this</span>.title = self.title;</span><br><span class="line">            <span class="keyword">this</span>.link = self.link;</span><br><span class="line">            <span class="keyword">this</span>.property = self.property;</span><br><span class="line">            <span class="keyword">this</span>.propertylink = self.propertylink;</span><br><span class="line">            <span class="keyword">this</span>.tags = self.tags;</span><br><span class="line">            <span class="keyword">this</span>.total_price = self.total_price;</span><br><span class="line">            <span class="keyword">this</span>.unit_price = self.unit_price;</span><br><span class="line">            <span class="keyword">this</span>.type_time = self.type_time;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对应了下面这个列表页面中所需要提取的数据<img src="/爬虫/crawler-cheerio-ts/链家列表页面.png" title="链家的列表页面"></p><p>在爬取页面的时候，按照这个类型中声明的属性进行爬取即可。这一点可以用于多人协作中，一个人负责确定所要爬取的数据的原型（声明这个类），另一个人便写爬虫，其他人按照这个类型对数据进行分析。</p><h2 id="延时函数编写"><a href="#延时函数编写" class="headerlink" title="延时函数编写"></a>延时函数编写</h2><p>如果想让程序等待一定时间再继续爬取，<code>setInterval()</code>函数是可以使用的，但是又容易掉到回调坑里面。如果你再一个请求得到返回结果后又发起了一系列请求，这样两套<code>setInterval()</code>是统一不起来的，各计各的时间（因为request也用的是回调）。这个时候用TypeScript的<code>await</code>关键字调用一个延时函数（起名为<code>delay()</code>）是再好不过的。</p><p><code>delay()</code>函数如下：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时函数</span></span><br><span class="line"><span class="comment"> * @param times 延时时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">times: <span class="built_in">number</span></span>): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt;<span class="function">(<span class="params">(<span class="params">resolve, reject</span>)=&gt;&#123;setTimeout(<span class="params">(<span class="params"></span>)=&gt;resolve(<span class="params"></span>), times</span>)&#125;</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>使用时直接用await关键字“调用”即可<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> delay(<span class="number">10000</span>);</span><br></pre></td></tr></table></figure></p><h2 id="“前端爬虫”的后台搭建"><a href="#“前端爬虫”的后台搭建" class="headerlink" title="“前端爬虫”的后台搭建"></a>“前端爬虫”的后台搭建</h2><p>像百度地图API这种开放平台，有的时候JavaScript API提供的功能比Web服务API提供的功能多。例如，JavaScript API提供了“商圈”数据获取的功能。如果我们要爬取商圈数据，那就只在HTML页面中，调用这套API，将获取到的数据，通过Ajax发送到服务器上。此时要求服务器需要提供上传数据的接口，一旦这个接口被访问，服务器将前端上传的数据保存到文件中即可。</p><blockquote><p>之所以这样做，是因为浏览器一般没有直接操作本地文件的能力，不能再获取到数据之后直接保存成文件。如果真要直接保存，那可能只能保存成cookie或者“本地存储”之类的东西？这样又不是很好用。</p></blockquote><p>这样一个爬虫的分工就更明显了。前端工程师可以在前端设计页面如何自动调用API进行数据获取并提交，后端工程师设计服务器接口以进行数据的接收、处理和存储。</p><p>例如在编写这个商圈数据爬虫的过程中，百度给的<a href="http://api.map.baidu.com/library/CityList/1.4/examples/CityList.html" target="_blank" rel="noopener">示例页面</a>是这样的：<img src="/爬虫/crawler-cheerio-ts/百度商圈API示例页面.png"></p><p>使用的是百度提供的<a href="http://api.map.baidu.com/library/CityList/1.4/docs/symbols/BMapLib.CityList.html" target="_blank" rel="noopener">CityList</a>类，包含两个方法：</p><ul><li><code>getBussiness()</code>：获取商圈数据。</li><li><code>getSubAreaList()</code>：获取下级的区域列表。</li></ul><p>通过前端不断调用<code>getBussiness()</code>方法，即可获取到不同商圈的参数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; all_business.length; j++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = all_business[j];</span><br><span class="line">    <span class="built_in">console</span>.log(element, <span class="string">"商圈数据"</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        cityList.getBusiness(element, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: <span class="string">"/upload/businessCircle"</span>,</span><br><span class="line">                    type: <span class="string">"POST"</span>,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                            name: element,</span><br><span class="line">                            business: json,</span><br><span class="line">                            city: <span class="string">"武汉市"</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    success: <span class="function"><span class="keyword">function</span> (<span class="params">body</span>) </span>&#123;</span><br><span class="line">                        resolve();</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        reject();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>这段程序代码中：</p><ul><li>由于ES6带来了<code>await</code>，前端现在也可以使用这种方式来使异步执行的程序同步化。但同样要求在<code>async</code>修饰的函数中才能使用<code>await</code>关键字。</li><li><code>all_business</code>是所有商圈的名字。不同城市可能有相同名字的商圈，比如“中山公园”，这时可以根据返回结果中商圈的“城市”字段在判断。</li><li><code>JSON.stringify()</code>POST参数是“Key-Value”模式的，因此一个键对应一个值，这个值用字符串形式。如果直接传入一个对象，会被转换成多个键值对的形式。所以遇到JS对象，就要用<code>JSON.stringify()</code>函数将其变成字符串，在后台再用<code>JSON.parse()</code>函数解析。</li><li>POST参数可以使用TypeScript的interface进行建模，这就需要浏览器中的脚本也使用TypeScript编写，然后编译。对于前端来说使用TypeScript的意义可能不大，因为很多前端库没有TypeScript的声明文件。但是前端工程师可以将自己所采用的POST参数模型交给后端工程师，后端工程师按照这个模型进行处理。</li></ul></blockquote><p>在后端，建立一个接受POST请求的服务，比如我用Express搭建的服务器，提供了这样一个POST接口：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浏览器提交商圈</span></span><br><span class="line"><span class="comment"> * @param req 请求</span></span><br><span class="line"><span class="comment"> * @param res 响应</span></span><br><span class="line"><span class="comment"> * @param next 后处理函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postBusinessCircle</span>(<span class="params">req: express.Request, res: express.Response, next: express.NextFunction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data: &#123;name: <span class="built_in">string</span>, city: <span class="built_in">string</span>, business: BusinessCircle[]&#125; = <span class="built_in">JSON</span>.parse(req.body.body);</span><br><span class="line">    fs.writeFile(<span class="string">`data/BusinessCircle/<span class="subst">$&#123;data.name&#125;</span>.json`</span>, <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        name: data.name,</span><br><span class="line">        business: data.business.filter(<span class="function"><span class="params">x</span> =&gt;</span> x.city === data.city)</span><br><span class="line">    &#125;), <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;data.name&#125;</span>写文件完成`</span>);</span><br><span class="line">            res.send(<span class="string">"success"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line">router.post(<span class="string">"/businessCircle"</span>, postBusinessCircle)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p><p>即可接收前端通过POST参数上传的数据。</p><p>具体程序示例请参考：<a href="https://github.com/HPDell/baidu-business-circle" target="_blank" rel="noopener">baidu-business-circle</a>。</p><h1 id="其他的话"><a href="#其他的话" class="headerlink" title="其他的话"></a>其他的话</h1><h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><p>要爬虫一定无法避免抓包。一般浏览器的开发人员工具又抓包的功能，同样也可以使用一些抓包工具来抓包。我比较喜欢使用抓包工具Fiddler。</p><p>使用浏览器自带的抓包工具，只能在当前页面抓包，而且如果新弹出了一个窗口，往往需要打开抓包工具后刷新一下页面才能抓到包。抓包的结果不能保存，不太方便。</p><p>使用Fiddler抓包就比较有优势，可以克服上述问题。但是Fiddler抓包范围太广，有些其他程序的http/https请求也会被抓到，因此抓包的结果可能要多很多。这个时候就要仔细分析哪些包是需要的，哪些包是不需要的。分析起来难度增大俩。</p><p>其他抓包工具我还没有试过，用过Fiddler之后感觉确实挺好用的，所以就没有试其他的了。</p><p>Fiddler还可以抓手机上的包，只需要设置代理即可，我曾经用这种方法抓了参考消息App的包，分析出它的API。如果一个手机软件用的是HTTPS协议，装一下Fiddler的证书即可。当然这时最好还是在安卓模拟器里面安装，以防个人信息无意中泄露。</p><h2 id="SourceMap选项"><a href="#SourceMap选项" class="headerlink" title="SourceMap选项"></a>SourceMap选项</h2><p>如果使用VSCode编写的话，可以直接调试。直接调试JavaScript是可以的，但是如何调试TypeScript呢？毕竟tsc编译生成的JS脚本太复杂了。</p><p>这需要在tsconfig.json文件和.vscode/launch.json中，分别开启sourceMap选项和sourceMaps选项。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// tsconfig.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"lib"</span>: [</span><br><span class="line">            <span class="string">"es2015"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"sourceMap"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// .vscode/launch.json</span><br><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Launch Program"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">            <span class="attr">"sourceMaps"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"outFiles"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;/**/*.js"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Visual-Studio-Code-的插件"><a href="#Visual-Studio-Code-的插件" class="headerlink" title="Visual Studio Code 的插件"></a>Visual Studio Code 的插件</h2><p>VSCode有一个“JSON to TS”的插件，在使用起来非常方便。这个插件可以根据剪贴板或JSON文件中的JSON字符串，按照其格式，生成对应的TypeScript Interface。这样，如果爬取一些给出了示例JSON数据的开放API，或者是前端工程师提供的示例数据，都可以直接使用这个插件生成Interface，非常方便开发。</p><p>不过这样生成的Interface也不是万能的，需要手动修改一些地方。如一些Interface的名字等。</p><hr><p>暂时先记录到这里了。如果日后发现有一些需要补充的还会再添加上。如有错误欢迎大家指正。</p>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手机中的信息安全</title>
      <link href="/uncategorized/information-security-on-mobile/"/>
      <content type="html"><![CDATA[<p>　　<a id="more"></a><img src="/uncategorized/information-security-on-mobile/paragraph.png"></p>]]></content>
      
      
        <tags>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WPF 给列表加上自动编号</title>
      <link href="/WPF/list-with-number/"/>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>给 WPF 列表添加自动编号是个非常头疼的问题。综合网上的解决方案，有几种：</p><ul><li>使用数据绑定。即给数据对象加入一个表示编号的属性，利用数据绑定显示编号。此方法实现方便，但是难以自动更新。</li><li>使用代码。在网上看到了这样一种解决方法，文章很多，比如<a href="http://www.cnblogs.com/CSharpSPF/archive/2012/02/29/2373287.html" target="_blank" rel="noopener">这里</a>，看起来比较麻烦，我们目标是寻找一种纯 XAML 的解决方案。</li><li>还有一个使用 VB.Net 写的代码示例（<a href="http://download.csdn.net/download/u013305271/6874881" target="_blank" rel="noopener">WPF中给listboxItem加上序号标签</a>），声称可以。但是我不太了解 VB，不清除具体情况。</li><li>还有一个方案看起来是非常简单的，也是我所采用的解决方案。最早没有成功实现，后来参考了《WPF 编程宝典》才成功实现。但是现在一时半会儿找不到了。</li></ul><a id="more"></a><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>《WPF 编程宝典》中介绍了“条纹列表”样式的实现。样子大概如下：</p><h2 id="条纹列表"><a href="#条纹列表" class="headerlink" title="条纹列表"></a>条纹列表</h2><p>实现条纹列表，需要用到 ListBox/ListView 控件的 <code>AlternationCount</code> 属性。MSDN对该属性的解释如下：</p><blockquote><p>获取或设置 ItemsControl 中的交替项容器的数目，该控件可使交替容器具有唯一外观。</p></blockquote><p>交替项容器的效果，就是对每一个 ListBoxItem/ListViewItem 有一个 <code>ItemsControl.AlternationIndex</code> 属性，表示该项的交替位置。例如，如果对一个 ListBox/ListView 控件设置 <code>AlternationCount</code> 属性为 3，则每一项的索引号和交替项索引号如下：</p><table><thead><tr><th>列表索引</th><th>交替项索引</th></tr></thead><tbody><tr><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>3</td><td>0</td></tr><tr><td>4</td><td>1</td></tr><tr><td>5</td><td>2</td></tr><tr><td>6</td><td>0</td></tr><tr><td>7</td><td>1</td></tr></tbody></table><p>于是，根据交替项索引，就可以实现条纹列表。在数据模板中，使用 <code>RelativeSource</code> 找到当前数据所在的 <code>ListBoxItem</code>，使用 <code>(ItemsControl.AlternationIndex)</code> 属性获取其交替项索引，对不同的索引进行处理。或者在生成的项的样式模板中，使用触发器修改条目样式，原书代码如下：</p><h2 id="编号列表"><a href="#编号列表" class="headerlink" title="编号列表"></a>编号列表</h2><p>将上述方法进行推广，即可得到编号列表。我们可以将 <code>AlternationCount</code> 属性设置为列表项目的总数，这样在 <code>ItemsControl.AlternationIndex</code> 属性中，就可以获取当前列表项在列表中的位置。</p><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>在数据模板中，将一个 <code>TextBlock</code> 的 <code>Text</code> 属性绑定到该属性中，即可进行显示。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">Text</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem&#125;, </span></span></span><br><span class="line"><span class="tag"><span class="string">                          Path=(ItemsControl.AlternationIndex)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h3><p>当然，该位置是从 0 开始的，一般我们习惯于从 1 开始。因此，需要一个转换器。既然使用了转换器，就可以自定义很多表示方法，如“周日”、“周一”……“周六”；“第1名”、“第2名”……</p><p>例如如下设计的一个转换器：<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">IntToLevelStringConverter</span> : <span class="title">IValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">string</span>[] LevelString = &#123; <span class="string">"第一级"</span>, <span class="string">"第二级"</span>, <span class="string">"第三级"</span>, <span class="string">"第四级"</span>, <span class="string">"第五级"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> levelRank = (<span class="keyword">int</span>)<span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (levelRank &lt; LevelString.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> LevelString[levelRank];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">ConvertBack</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用图片指示等级"><a href="#使用图片指示等级" class="headerlink" title="使用图片指示等级"></a>使用图片指示等级</h3><p>或者使用图片指示等级，如<img src="/WPF/list-with-number/1ji.png" alt=""><img src="/WPF/list-with-number/2ji.png" alt=""><img src="/WPF/list-with-number/3ji.png" alt=""></p><p>那么，XAML 代码中应创建一个 <code>Image</code> 控件，将其 <code>Source</code> 属性绑定到 <code>ItemsControl.AlternationIndex</code> 属性，利用转换器转换成对应图片的 URL。</p><p>XAML的代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Image</span> <span class="attr">Source</span>=<span class="string">"&#123;Binding RelativeSource=&#123;RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem&#125;, </span></span></span><br><span class="line"><span class="tag"><span class="string">                        Path=(ItemsControl.AlternationIndex), </span></span></span><br><span class="line"><span class="tag"><span class="string">                        Converter=&#123;StaticResource IntToIconStringConverter&#125;&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>转换器的代码：<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">IntToIconStringConverter</span> : <span class="title">IValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">string</span>[] IconPath =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"pack://application:,,,/FGISClient.UIControls;component/Icon/FireHandle/1ji.png"</span>,</span><br><span class="line">        <span class="string">"pack://application:,,,/FGISClient.UIControls;component/Icon/FireHandle/2ji.png"</span>,</span><br><span class="line">        <span class="string">"pack://application:,,,/FGISClient.UIControls;component/Icon/FireHandle/3ji.png"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Convert</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> levelRank = (<span class="keyword">int</span>)<span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">if</span> (levelRank &lt; IconPath.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> IconPath[levelRank];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">ConvertBack</span>(<span class="params"><span class="keyword">object</span> <span class="keyword">value</span>, Type targetType, <span class="keyword">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> WPF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XAML </tag>
            
            <tag> ListBox </tag>
            
            <tag> ListView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Edge浏览器下启用全功能Gitment</title>
      <link href="/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/GitmentWithEdge/"/>
      <content type="html"><![CDATA[<p><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a>评论系统是一款基于 GitHub Issues 的评论系统，适合作为软件开发技术类博客作为评论系统使用，同时支持Hexo等博客框架。</p><p>因此在Hexo框架的博客中，使用Gitment搭建评论系统是一个不错的选择。但是其对浏览器兼容性不够强，根据<a href="https://github.com/imsun/gitment/issues/50" target="_blank" rel="noopener">Issue #50</a>中的描述：</p><blockquote><ul><li>Chrome通过</li><li>Firefox 能正常显示评论，但login时出现[object ProgressEvent]</li><li>Edge 只显示评论，无法进行评论</li><li>IE 11完全不显示</li></ul></blockquote><a id="more"></a><p>因此需要寻找提高Gitment兼容性的办法。作者<a href="https://github.com/GeekaholicLin" target="_blank" rel="noopener">GeekaholicLin</a> 在其发起的<a href="https://github.com/imsun/gitment/pull/52" target="_blank" rel="noopener">Pull request #52</a> 中提供了两个修改过的<code>gitment.browser.js</code>文件，地址为：</p><ul><li><a href="http://blog.geekaholic.cn/js/thirdParty/gitment.browser.js" target="_blank" rel="noopener">http://blog.geekaholic.cn/js/thirdParty/gitment.browser.js</a></li><li><a href="http://blog.geekaholic.cn/js/thirdParty/gitment.browser.min.js" target="_blank" rel="noopener">http://blog.geekaholic.cn/js/thirdParty/gitment.browser.min.js</a></li></ul><p>将这两个文件替换已经部署好的网站中的两个<code>gitment.browser</code>文件，即可实现在Edge浏览器中启用Gitment全功能。</p><p>效果图：<img src="/博客相关/GitmentWithEdge/demo.jpg"></p><blockquote><p>经过测试，直接替换 node_modules/gitment 中的文件是没有效果的。目前只能在生成之后手动替换 gitment.browser 文件，或者等待作者更新。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Edge </tag>
            
            <tag> Gitment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WPF制作带居中三角形指示的Tooltip样式的Tooltip</title>
      <link href="/WPF/WPF-Bootstrap-Tooltip/"/>
      <content type="html"><![CDATA[<p>本文所要实现的目标样式如下图。</p><img src="/WPF/WPF-Bootstrap-Tooltip/手工标注.jpg" title="目标样式"><p>可以看到这个Tooltip能够分解为一个<strong>三角形</strong>和一个<strong>圆角矩形</strong>，而且三角形要居中显示。经过在网上的充分搜索，没有找到可以直接使用的解决方案，那么就自己动手设计一个。<a id="more"></a></p><h1 id="布局框架"><a href="#布局框架" class="headerlink" title="布局框架"></a>布局框架</h1><p>既然要居中显示一个三角形，最方便的应该就是Gird布局了。因此使用XAML创建一个Grid布局。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">"g"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>由于三角形和圆角矩形在某种程度上说是结合在一起的，因此无需设置行和列。所以这里使用一个<code>Border</code>来布局也是可以的。</p><h1 id="内部布局"><a href="#内部布局" class="headerlink" title="内部布局"></a>内部布局</h1><p>我们希望使用三角形“盖住”一部分圆角矩形的边框，因此需要将三角形放置在圆角矩形的下方，才能实现遮盖的效果。除此之外还有以下要求：</p><ul><li>采用<code>Canvas</code>面板来绘制三角形，此面板需要水平居中对齐、垂直顶部对齐；假设三角形高为6，宽为12，为等腰三角形。</li><li>采用<code>Border</code>控件实现圆角矩形，需要有一定边框宽度和颜色，水平拉伸、垂直拉伸，且与<code>Grid</code>面板的上边缘有一定的边距，边距大小略小于三角形高，这样可以让三角形遮盖一段边框。</li></ul><p>因此采用如下设计：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">"g"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span> <span class="attr">CornerRadius</span>=<span class="string">"3"</span> <span class="attr">BorderThickness</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">BorderBrush</span>=<span class="string">"&#123;StaticResource TooltipBorderBrush&#125;"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">HorizontalAlignment</span>=<span class="string">"Stretch"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">VerticalAlignment</span>=<span class="string">"Stretch"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">Background</span>=<span class="string">"White"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">Margin</span>=<span class="string">"0,5,0,0"</span> <span class="attr">Padding</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Canvas</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">VerticalAlignment</span>=<span class="string">"Top"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">Height</span>=<span class="string">"6"</span> <span class="attr">Width</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="三角形绘制"><a href="#三角形绘制" class="headerlink" title="三角形绘制"></a>三角形绘制</h1><p>在一个<code>Canvas</code>面板中，使用<code>Polygon</code>绘制三角形，设置为白色。那么这个三角形三个点的坐标当然就是$(0,6)$、$(6,0)$、$(12,6)$了。这样就能绘制一个三角形，又遮盖一段圆角矩形的边框。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Polygon</span> <span class="attr">Points</span>=<span class="string">"0,6 6,0 12,6"</span> <span class="attr">StrokeThickness</span>=<span class="string">"0"</span> <span class="attr">Fill</span>=<span class="string">"White"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>三角形的边框不能直接使用属性进行设置了，否则三角形的底也会被绘制上边框，无法达到效果。我们可以绘制一段多段线（<code>Polyline</code>）来实现边框的绘制。同样还是设置上面三个点，但是对象类型改为<code>Polyline</code>。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Polyline</span> <span class="attr">Points</span>=<span class="string">"0,6 6,0 12,6"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">Stroke</span>=<span class="string">"&#123;StaticResource TooltipBorderBrush&#125;"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">StrokeThickness</span>=<span class="string">"1"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时三角形绘制完成。</p><blockquote><p><strong>注意</strong>：需要明确指定<code>Canvas</code>面板的宽度，此处为12。否则，三角形无法真正居中，而是最左边对齐到圆角矩形的中间。</p></blockquote><h1 id="圆角矩形的设置"><a href="#圆角矩形的设置" class="headerlink" title="圆角矩形的设置"></a>圆角矩形的设置</h1><p>圆角矩形样式较好设置。内容的设置可以使用<code>ContentPresenter</code>，使得在使用时可以直接使用XAML代码来设置内容。该Presenter设置为水平居中、垂直居中即可。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">"g"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Border</span> <span class="attr">CornerRadius</span>=<span class="string">"3"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">BorderThickness</span>=<span class="string">"1"</span> <span class="attr">BorderBrush</span>=<span class="string">"&#123;StaticResource TooltipBorderBrush&#125;"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">HorizontalAlignment</span>=<span class="string">"Stretch"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Stretch"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">Background</span>=<span class="string">"White"</span> <span class="attr">Margin</span>=<span class="string">"0,5,0,0"</span> <span class="attr">Padding</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Canvas</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Top"</span> <span class="attr">Height</span>=<span class="string">"6"</span> <span class="attr">Width</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Polygon</span> <span class="attr">Points</span>=<span class="string">"0,6 6,0 12,6"</span> <span class="attr">StrokeThickness</span>=<span class="string">"0"</span> <span class="attr">Fill</span>=<span class="string">"White"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Polyline</span> <span class="attr">Points</span>=<span class="string">"0,6 6,0 12,6"</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">Stroke</span>=<span class="string">"&#123;StaticResource TooltipBorderBrush&#125;"</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">StrokeThickness</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以将此段代码放置在自定义Tooltip样式的<code>Template</code>属性值下，实现通过样式进行设置。即<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">x:Key</span>=<span class="string">"FGisToolTipStyle"</span> <span class="attr">TargetType</span>=<span class="string">"ToolTip"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"OverridesDefaultStyle"</span> <span class="attr">Value</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"HasDropShadow"</span> <span class="attr">Value</span>=<span class="string">"True"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Foreground"</span> <span class="attr">Value</span>=<span class="string">"#333333"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"FontSize"</span> <span class="attr">Value</span>=<span class="string">"14"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Placement"</span> <span class="attr">Value</span>=<span class="string">"Bottom"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Template"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ControlTemplate</span> <span class="attr">TargetType</span>=<span class="string">"ToolTip"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">x:Name</span>=<span class="string">"g"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Border</span> <span class="attr">CornerRadius</span>=<span class="string">"3"</span> </span></span></span><br><span class="line"><span class="undefined">                            BorderThickness="1" </span></span><br><span class="line"><span class="undefined">                            BorderBrush="&#123;StaticResource TooltipBorderBrush&#125;" </span></span><br><span class="line"><span class="undefined">                            HorizontalAlignment="Stretch" </span></span><br><span class="line"><span class="undefined">                            VerticalAlignment="Stretch" </span></span><br><span class="line"><span class="undefined">                            Background="White" </span></span><br><span class="line"><span class="undefined">                            Margin="0,5,0,0" Padding="8"&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">ContentPresenter</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> </span></span></span><br><span class="line"><span class="undefined">                                          HorizontalAlignment="Center"/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Border</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Canvas</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> </span></span></span><br><span class="line"><span class="undefined">                            VerticalAlignment="Top" </span></span><br><span class="line"><span class="undefined">                            Height="6" Width="12"&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Polygon</span> <span class="attr">Points</span>=<span class="string">"0,6 6,0 12,6"</span> <span class="attr">StrokeThickness</span>=<span class="string">"0"</span> <span class="attr">Fill</span>=<span class="string">"White"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Polyline</span> <span class="attr">Points</span>=<span class="string">"0,6 6,0 12,6"</span> </span></span></span><br><span class="line"><span class="undefined">                                  Stroke="&#123;StaticResource TooltipBorderBrush&#125;" </span></span><br><span class="line"><span class="undefined">                                  StrokeThickness="1"/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">Canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ControlTemplate</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Setter.Value</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Setter</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以放置在自定义的用户控件中，作为控件使用。</p>]]></content>
      
      <categories>
          
          <category> WPF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPF </tag>
            
            <tag> XAML </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
